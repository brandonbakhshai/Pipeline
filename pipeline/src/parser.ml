type token =
  | COLON
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | COMMA
  | PLUS
  | MINUS
  | STAR
  | DIVIDE
  | MOD
  | ASSIGN
  | NOT
  | DOT
  | DEREF
  | REF
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | SASSIGN
  | POINTER
  | LET
  | RETURN
  | IF
  | ELSE
  | FOR
  | INT
  | FLOAT
  | BOOL
  | CHAR
  | VOID
  | STRING
  | FUNCTION
  | STRUCT
  | CAST
  | TO
  | SET
  | PIPELINE
  | WHILE
  | STR_LIT of (string)
  | FLOAT_LIT of (float)
  | INT_LIT of (int)
  | CHAR_LIT of (char)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast;;

let first (a,_,_) = a;;
let second (_,b,_) = b;;
let third (_,_,c) = c;;
# 67 "parser.ml"
let yytransl_const = [|
  257 (* COLON *);
  258 (* SEMI *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* LBRACK *);
  264 (* RBRACK *);
  265 (* COMMA *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* STAR *);
  269 (* DIVIDE *);
  270 (* MOD *);
  271 (* ASSIGN *);
  272 (* NOT *);
  273 (* DOT *);
  274 (* DEREF *);
  275 (* REF *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* LEQ *);
  280 (* GT *);
  281 (* GEQ *);
  282 (* TRUE *);
  283 (* FALSE *);
  284 (* AND *);
  285 (* OR *);
  286 (* SASSIGN *);
  287 (* POINTER *);
  288 (* LET *);
  289 (* RETURN *);
  290 (* IF *);
  291 (* ELSE *);
  292 (* FOR *);
  293 (* INT *);
  294 (* FLOAT *);
  295 (* BOOL *);
  296 (* CHAR *);
  297 (* VOID *);
  298 (* STRING *);
  299 (* FUNCTION *);
  300 (* STRUCT *);
  301 (* CAST *);
  302 (* TO *);
  303 (* SET *);
  304 (* PIPELINE *);
  305 (* WHILE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  306 (* STR_LIT *);
  307 (* FLOAT_LIT *);
  308 (* INT_LIT *);
  309 (* CHAR_LIT *);
  310 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\004\000\006\000\006\000\
\010\000\010\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\008\000\008\000\003\000\005\000\009\000\009\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\013\000\013\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\014\000\
\014\000\015\000\015\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\010\000\000\000\001\000\
\002\000\004\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\002\000\000\000\002\000\004\000\005\000\000\000\002\000\
\002\000\002\000\003\000\003\000\005\000\007\000\009\000\005\000\
\005\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
\002\000\002\000\002\000\002\000\003\000\004\000\003\000\000\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\068\000\000\000\000\000\000\000\000\000\001\000\
\003\000\004\000\005\000\000\000\000\000\000\000\000\000\011\000\
\012\000\014\000\013\000\015\000\016\000\000\000\000\000\000\000\
\019\000\018\000\017\000\021\000\000\000\000\000\000\000\000\000\
\000\000\009\000\000\000\022\000\020\000\000\000\000\000\019\000\
\010\000\000\000\000\000\000\000\023\000\006\000\000\000\000\000\
\000\000\000\000\038\000\039\000\000\000\000\000\000\000\000\000\
\000\000\041\000\037\000\036\000\000\000\000\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\000\
\028\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\056\000\000\000\062\000\000\000\
\000\000\000\000\000\000\032\000\000\000\033\000\000\000\000\000\
\030\000\000\000\000\000\031\000"

let yydgoto = "\002\000\
\003\000\004\000\037\000\010\000\011\000\029\000\062\000\032\000\
\043\000\031\000\063\000\064\000\101\000\105\000\106\000"

let yysindex = "\019\000\
\000\000\000\000\000\000\001\000\216\254\238\254\239\254\000\000\
\000\000\000\000\000\000\226\255\052\255\057\255\226\255\000\000\
\000\000\000\000\000\000\000\000\000\000\007\255\061\255\226\255\
\000\000\000\000\000\000\000\000\065\255\025\255\068\255\252\254\
\226\255\000\000\226\255\000\000\000\000\076\255\031\255\000\000\
\000\000\054\255\108\255\151\000\000\000\000\000\151\000\107\000\
\151\000\151\000\000\000\000\000\056\255\084\255\085\255\151\000\
\087\255\000\000\000\000\000\000\004\255\037\255\000\000\069\002\
\151\000\163\002\158\255\077\255\077\255\077\255\077\255\000\000\
\093\002\151\000\151\000\041\002\151\000\151\000\151\000\078\255\
\000\000\151\000\151\000\151\000\151\000\151\000\041\255\151\000\
\151\000\151\000\151\000\151\000\151\000\151\000\151\000\000\000\
\000\000\000\000\185\002\227\002\094\255\226\255\207\002\227\002\
\095\255\091\255\227\002\151\000\012\255\012\255\077\255\077\255\
\077\255\000\000\010\003\010\003\119\255\119\255\119\255\119\255\
\118\000\247\002\063\000\151\000\000\000\063\000\000\000\151\000\
\117\002\067\255\141\002\000\000\227\002\000\000\063\000\151\000\
\000\000\099\255\063\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\100\255\
\000\000\000\000\000\000\000\000\000\000\000\000\101\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\208\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\162\000\000\000\000\000\000\000\
\000\000\000\000\000\000\202\000\230\000\002\001\030\001\000\000\
\000\000\000\000\107\255\000\000\000\000\112\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\255\000\000\000\000\000\000\013\255\
\000\000\113\255\006\255\000\000\142\001\170\001\058\001\086\001\
\114\001\000\000\000\002\021\002\180\001\208\001\218\001\246\001\
\069\255\014\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\000\000\000\000\023\255\000\000\000\000\114\255\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\108\000\000\000\000\000\000\000\041\000\081\000\
\077\000\000\000\187\255\212\255\243\255\000\000\000\000"

let yytablesize = 1059
let yytable = "\066\000\
\008\000\036\000\068\000\069\000\070\000\071\000\078\000\061\000\
\073\000\061\000\035\000\076\000\035\000\012\000\061\000\054\000\
\066\000\054\000\079\000\001\000\069\000\066\000\054\000\084\000\
\085\000\086\000\067\000\005\000\087\000\099\000\100\000\067\000\
\103\000\104\000\107\000\013\000\014\000\109\000\110\000\111\000\
\112\000\113\000\054\000\115\000\116\000\117\000\118\000\119\000\
\120\000\121\000\122\000\061\000\023\000\130\000\024\000\026\000\
\132\000\072\000\044\000\054\000\027\000\025\000\028\000\129\000\
\030\000\137\000\047\000\065\000\033\000\140\000\053\000\049\000\
\053\000\038\000\050\000\039\000\035\000\053\000\034\000\131\000\
\040\000\051\000\052\000\133\000\041\000\005\000\074\000\075\000\
\026\000\077\000\080\000\100\000\108\000\087\000\114\000\124\000\
\053\000\053\000\127\000\128\000\056\000\135\000\139\000\007\000\
\008\000\058\000\059\000\060\000\034\000\061\000\044\000\009\000\
\045\000\046\000\053\000\064\000\065\000\034\000\047\000\048\000\
\042\000\067\000\138\000\049\000\000\000\000\000\050\000\000\000\
\082\000\083\000\084\000\085\000\086\000\051\000\052\000\087\000\
\000\000\000\000\000\000\000\000\053\000\054\000\125\000\055\000\
\016\000\017\000\018\000\019\000\020\000\021\000\000\000\022\000\
\056\000\000\000\000\000\000\000\057\000\058\000\059\000\060\000\
\044\000\061\000\045\000\097\000\000\000\000\000\000\000\000\000\
\047\000\048\000\000\000\000\000\000\000\049\000\000\000\000\000\
\050\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\
\052\000\000\000\000\000\000\000\000\000\000\000\053\000\054\000\
\000\000\055\000\016\000\017\000\018\000\019\000\020\000\021\000\
\000\000\022\000\056\000\000\000\000\000\000\000\057\000\058\000\
\059\000\060\000\023\000\061\000\023\000\023\000\000\000\000\000\
\000\000\000\000\023\000\023\000\000\000\000\000\000\000\023\000\
\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\000\023\000\000\000\000\000\015\000\000\000\000\000\
\023\000\023\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\000\000\023\000\023\000\000\000\000\000\000\000\
\023\000\023\000\023\000\023\000\000\000\023\000\016\000\017\000\
\018\000\019\000\020\000\021\000\000\000\022\000\000\000\029\000\
\000\000\029\000\029\000\000\000\000\000\000\000\000\000\029\000\
\029\000\000\000\000\000\000\000\029\000\000\000\000\000\029\000\
\005\000\000\000\000\000\000\000\000\000\000\000\029\000\029\000\
\000\000\000\000\000\000\006\000\007\000\029\000\029\000\000\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\000\000\
\029\000\029\000\000\000\000\000\000\000\029\000\029\000\029\000\
\029\000\044\000\029\000\045\000\000\000\000\000\000\000\000\000\
\000\000\047\000\048\000\000\000\000\000\000\000\049\000\000\000\
\000\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\052\000\000\000\000\000\000\000\000\000\000\000\053\000\
\054\000\000\000\055\000\016\000\017\000\018\000\019\000\020\000\
\021\000\000\000\022\000\056\000\000\000\044\000\000\000\057\000\
\058\000\059\000\060\000\000\000\061\000\047\000\048\000\000\000\
\000\000\000\000\049\000\000\000\000\000\050\000\000\000\082\000\
\083\000\084\000\085\000\086\000\051\000\052\000\087\000\000\000\
\000\000\088\000\089\000\090\000\091\000\092\000\093\000\016\000\
\017\000\018\000\019\000\020\000\021\000\000\000\022\000\056\000\
\000\000\044\000\000\000\000\000\058\000\059\000\060\000\000\000\
\061\000\047\000\065\000\040\000\000\000\040\000\049\000\000\000\
\000\000\050\000\040\000\040\000\040\000\040\000\040\000\040\000\
\051\000\052\000\040\000\000\000\000\000\040\000\040\000\040\000\
\040\000\040\000\040\000\000\000\000\000\040\000\040\000\000\000\
\000\000\000\000\000\000\056\000\000\000\000\000\000\000\000\000\
\058\000\059\000\060\000\057\000\061\000\057\000\000\000\040\000\
\000\000\000\000\057\000\057\000\057\000\057\000\057\000\057\000\
\000\000\000\000\000\000\000\000\000\000\057\000\057\000\057\000\
\057\000\057\000\057\000\000\000\000\000\057\000\057\000\058\000\
\000\000\058\000\000\000\000\000\000\000\000\000\058\000\058\000\
\058\000\058\000\058\000\058\000\000\000\000\000\000\000\057\000\
\000\000\058\000\058\000\058\000\058\000\058\000\058\000\000\000\
\000\000\058\000\058\000\060\000\000\000\060\000\000\000\000\000\
\000\000\000\000\060\000\060\000\060\000\060\000\060\000\060\000\
\000\000\000\000\000\000\058\000\000\000\060\000\060\000\060\000\
\060\000\060\000\060\000\000\000\000\000\060\000\060\000\059\000\
\000\000\059\000\000\000\000\000\000\000\000\000\059\000\059\000\
\059\000\059\000\059\000\059\000\000\000\000\000\000\000\060\000\
\000\000\059\000\059\000\059\000\059\000\059\000\059\000\000\000\
\000\000\059\000\059\000\044\000\000\000\044\000\000\000\000\000\
\000\000\000\000\044\000\044\000\044\000\044\000\044\000\044\000\
\000\000\000\000\000\000\059\000\000\000\044\000\044\000\044\000\
\044\000\044\000\044\000\000\000\000\000\044\000\044\000\045\000\
\000\000\045\000\000\000\000\000\000\000\000\000\045\000\045\000\
\045\000\045\000\045\000\045\000\000\000\000\000\000\000\044\000\
\000\000\045\000\045\000\045\000\045\000\045\000\045\000\000\000\
\000\000\045\000\045\000\046\000\000\000\046\000\000\000\000\000\
\000\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\
\000\000\000\000\000\000\045\000\000\000\046\000\046\000\046\000\
\046\000\046\000\046\000\000\000\000\000\046\000\046\000\042\000\
\000\000\042\000\000\000\000\000\000\000\000\000\042\000\042\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
\000\000\042\000\042\000\043\000\000\000\043\000\000\000\000\000\
\000\000\000\000\043\000\043\000\043\000\049\000\000\000\049\000\
\000\000\000\000\000\000\042\000\049\000\043\000\043\000\043\000\
\043\000\043\000\043\000\000\000\000\000\043\000\043\000\049\000\
\049\000\049\000\049\000\049\000\049\000\000\000\000\000\049\000\
\049\000\050\000\000\000\050\000\000\000\000\000\000\000\043\000\
\050\000\000\000\000\000\051\000\000\000\051\000\000\000\000\000\
\000\000\049\000\051\000\050\000\050\000\050\000\050\000\050\000\
\050\000\000\000\000\000\050\000\050\000\051\000\051\000\051\000\
\051\000\051\000\051\000\000\000\000\000\051\000\051\000\052\000\
\000\000\052\000\000\000\000\000\000\000\050\000\052\000\000\000\
\000\000\047\000\000\000\047\000\000\000\000\000\000\000\051\000\
\047\000\052\000\052\000\052\000\052\000\052\000\052\000\000\000\
\000\000\052\000\052\000\047\000\047\000\000\000\048\000\000\000\
\048\000\000\000\000\000\047\000\047\000\048\000\000\000\000\000\
\000\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\
\048\000\048\000\000\000\000\000\000\000\047\000\000\000\000\000\
\048\000\048\000\082\000\083\000\084\000\085\000\086\000\000\000\
\000\000\087\000\000\000\000\000\088\000\089\000\090\000\091\000\
\092\000\093\000\048\000\000\000\094\000\095\000\081\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\082\000\083\000\
\084\000\085\000\086\000\000\000\000\000\087\000\102\000\000\000\
\088\000\089\000\090\000\091\000\092\000\093\000\098\000\000\000\
\094\000\095\000\000\000\000\000\000\000\000\000\082\000\083\000\
\084\000\085\000\086\000\000\000\000\000\087\000\000\000\000\000\
\088\000\089\000\090\000\091\000\092\000\093\000\134\000\000\000\
\094\000\095\000\000\000\000\000\000\000\000\000\082\000\083\000\
\084\000\085\000\086\000\000\000\000\000\087\000\000\000\000\000\
\088\000\089\000\090\000\091\000\092\000\093\000\136\000\000\000\
\094\000\095\000\000\000\000\000\000\000\000\000\082\000\083\000\
\084\000\085\000\086\000\000\000\000\000\087\000\000\000\000\000\
\088\000\089\000\090\000\091\000\092\000\093\000\096\000\000\000\
\094\000\095\000\000\000\000\000\082\000\083\000\084\000\085\000\
\086\000\000\000\000\000\087\000\000\000\000\000\088\000\089\000\
\090\000\091\000\092\000\093\000\123\000\000\000\094\000\095\000\
\000\000\000\000\082\000\083\000\084\000\085\000\086\000\000\000\
\000\000\087\000\000\000\000\000\088\000\089\000\090\000\091\000\
\092\000\093\000\126\000\000\000\094\000\095\000\000\000\000\000\
\082\000\083\000\084\000\085\000\086\000\000\000\000\000\087\000\
\000\000\000\000\088\000\089\000\090\000\091\000\092\000\093\000\
\000\000\000\000\094\000\095\000\082\000\083\000\084\000\085\000\
\086\000\000\000\000\000\087\000\000\000\000\000\088\000\089\000\
\090\000\091\000\092\000\093\000\000\000\000\000\094\000\095\000\
\082\000\083\000\084\000\085\000\086\000\000\000\000\000\087\000\
\000\000\000\000\088\000\089\000\090\000\091\000\092\000\093\000\
\000\000\000\000\094\000\082\000\083\000\084\000\085\000\086\000\
\000\000\000\000\087\000\000\000\000\000\000\000\000\000\090\000\
\091\000\092\000\093\000"

let yycheck = "\044\000\
\000\000\006\001\047\000\048\000\049\000\050\000\003\001\002\001\
\053\000\004\001\002\001\056\000\004\001\054\001\009\001\002\001\
\004\001\004\001\015\001\001\000\065\000\009\001\009\001\012\001\
\013\001\014\001\004\001\032\001\017\001\074\000\075\000\009\001\
\077\000\078\000\079\000\054\001\054\001\082\000\083\000\084\000\
\085\000\086\000\029\001\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\046\001\012\000\123\000\003\001\015\000\
\126\000\002\001\003\001\046\001\054\001\005\001\002\001\108\000\
\024\000\135\000\011\001\012\001\004\001\139\000\002\001\016\001\
\004\001\033\000\019\001\035\000\009\001\009\001\054\001\124\000\
\005\001\026\001\027\001\128\000\054\001\032\001\003\001\003\001\
\048\000\003\001\054\001\136\000\015\001\017\001\054\001\002\001\
\028\001\029\001\004\001\009\001\045\001\035\001\004\001\004\001\
\004\001\050\001\051\001\052\001\002\001\054\001\003\001\004\000\
\005\001\006\001\046\001\004\001\004\001\004\001\011\001\012\001\
\040\000\045\000\136\000\016\001\255\255\255\255\019\001\255\255\
\010\001\011\001\012\001\013\001\014\001\026\001\027\001\017\001\
\255\255\255\255\255\255\255\255\033\001\034\001\102\000\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\255\255\044\001\
\045\001\255\255\255\255\255\255\049\001\050\001\051\001\052\001\
\003\001\054\001\005\001\006\001\255\255\255\255\255\255\255\255\
\011\001\012\001\255\255\255\255\255\255\016\001\255\255\255\255\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\027\001\255\255\255\255\255\255\255\255\255\255\033\001\034\001\
\255\255\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\255\255\044\001\045\001\255\255\255\255\255\255\049\001\050\001\
\051\001\052\001\003\001\054\001\005\001\006\001\255\255\255\255\
\255\255\255\255\011\001\012\001\255\255\255\255\255\255\016\001\
\255\255\255\255\019\001\255\255\255\255\255\255\255\255\255\255\
\255\255\026\001\027\001\255\255\255\255\012\001\255\255\255\255\
\033\001\034\001\255\255\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\255\255\044\001\045\001\255\255\255\255\255\255\
\049\001\050\001\051\001\052\001\255\255\054\001\037\001\038\001\
\039\001\040\001\041\001\042\001\255\255\044\001\255\255\003\001\
\255\255\005\001\006\001\255\255\255\255\255\255\255\255\011\001\
\012\001\255\255\255\255\255\255\016\001\255\255\255\255\019\001\
\032\001\255\255\255\255\255\255\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\043\001\044\001\033\001\034\001\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\044\001\045\001\255\255\255\255\255\255\049\001\050\001\051\001\
\052\001\003\001\054\001\005\001\255\255\255\255\255\255\255\255\
\255\255\011\001\012\001\255\255\255\255\255\255\016\001\255\255\
\255\255\019\001\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\033\001\
\034\001\255\255\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\255\255\044\001\045\001\255\255\003\001\255\255\049\001\
\050\001\051\001\052\001\255\255\054\001\011\001\012\001\255\255\
\255\255\255\255\016\001\255\255\255\255\019\001\255\255\010\001\
\011\001\012\001\013\001\014\001\026\001\027\001\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\037\001\
\038\001\039\001\040\001\041\001\042\001\255\255\044\001\045\001\
\255\255\003\001\255\255\255\255\050\001\051\001\052\001\255\255\
\054\001\011\001\012\001\002\001\255\255\004\001\016\001\255\255\
\255\255\019\001\009\001\010\001\011\001\012\001\013\001\014\001\
\026\001\027\001\017\001\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\255\255\028\001\029\001\255\255\
\255\255\255\255\255\255\045\001\255\255\255\255\255\255\255\255\
\050\001\051\001\052\001\002\001\054\001\004\001\255\255\046\001\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\255\255\028\001\029\001\002\001\
\255\255\004\001\255\255\255\255\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\046\001\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\029\001\002\001\255\255\004\001\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\046\001\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\255\255\028\001\029\001\002\001\
\255\255\004\001\255\255\255\255\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\046\001\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\029\001\002\001\255\255\004\001\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\046\001\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\255\255\028\001\029\001\002\001\
\255\255\004\001\255\255\255\255\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\046\001\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\029\001\002\001\255\255\004\001\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\046\001\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\255\255\028\001\029\001\002\001\
\255\255\004\001\255\255\255\255\255\255\255\255\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\046\001\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\029\001\002\001\255\255\004\001\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\002\001\255\255\004\001\
\255\255\255\255\255\255\046\001\009\001\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\255\255\028\001\029\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\255\255\028\001\
\029\001\002\001\255\255\004\001\255\255\255\255\255\255\046\001\
\009\001\255\255\255\255\002\001\255\255\004\001\255\255\255\255\
\255\255\046\001\009\001\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\255\255\028\001\029\001\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\255\255\028\001\029\001\002\001\
\255\255\004\001\255\255\255\255\255\255\046\001\009\001\255\255\
\255\255\002\001\255\255\004\001\255\255\255\255\255\255\046\001\
\009\001\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\029\001\020\001\021\001\255\255\002\001\255\255\
\004\001\255\255\255\255\028\001\029\001\009\001\255\255\255\255\
\255\255\255\255\255\255\046\001\255\255\255\255\255\255\255\255\
\020\001\021\001\255\255\255\255\255\255\046\001\255\255\255\255\
\028\001\029\001\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\046\001\255\255\028\001\029\001\002\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\046\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\002\001\255\255\
\028\001\029\001\255\255\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\002\001\255\255\
\028\001\029\001\255\255\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\002\001\255\255\
\028\001\029\001\255\255\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\004\001\255\255\
\028\001\029\001\255\255\255\255\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\004\001\255\255\028\001\029\001\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\004\001\255\255\028\001\029\001\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\028\001\029\001\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\029\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\028\001\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\017\001\255\255\255\255\255\255\255\255\022\001\
\023\001\024\001\025\001"

let yynames_const = "\
  COLON\000\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  DIVIDE\000\
  MOD\000\
  ASSIGN\000\
  NOT\000\
  DOT\000\
  DEREF\000\
  REF\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  SASSIGN\000\
  POINTER\000\
  LET\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  CHAR\000\
  VOID\000\
  STRING\000\
  FUNCTION\000\
  STRUCT\000\
  CAST\000\
  TO\000\
  SET\000\
  PIPELINE\000\
  WHILE\000\
  EOF\000\
  "

let yynames_block = "\
  STR_LIT\000\
  FLOAT_LIT\000\
  INT_LIT\000\
  CHAR_LIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 38 "parser.mly"
            ( _1 )
# 558 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parser.mly"
                 ( [], [], [] )
# 564 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 42 "parser.mly"
               ( (_2 :: first _1), second _1, third _1 )
# 572 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_decl) in
    Obj.repr(
# 43 "parser.mly"
                  ( first _1, (_2 :: second _1), third _1 )
# 580 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'struct_decl) in
    Obj.repr(
# 44 "parser.mly"
                     ( first _1, second _1, (_2 :: third _1) )
# 588 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'formals_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 55 "parser.mly"
     ( { typ = _6;

	 fname = _2;
	 formals = _4;
	 locals = List.rev _8;
	 body = List.rev _9 } )
# 604 "parser.ml"
               : 'fun_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
                  ( [] )
# 610 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 64 "parser.mly"
                  ( List.rev _1 )
# 617 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 67 "parser.mly"
                             ( [(_1,_2)] )
# 625 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 68 "parser.mly"
                             ( (_3,_4) :: _1 )
# 634 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
        ( Int )
# 640 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
          ( Float )
# 646 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
         (Char)
# 652 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
         ( Bool )
# 658 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
         ( Void )
# 664 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
           ( MyString )
# 670 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 77 "parser.mly"
              ( StructType (_2) )
# 677 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 78 "parser.mly"
                          ( PointerType (_2) )
# 684 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
                     ( [] )
# 690 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 82 "parser.mly"
                     ( _2 :: _1 )
# 698 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 85 "parser.mly"
                   ( (_3, _2) )
# 706 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    Obj.repr(
# 89 "parser.mly"
      ( { sname = _2;
      sformals = _4;
      } )
# 716 "parser.ml"
               : 'struct_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
                   ( [] )
# 722 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 95 "parser.mly"
                   ( _2 :: _1 )
# 730 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
              ( Expr _1 )
# 737 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
                ( Return Noexpr )
# 743 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                     ( Return _2 )
# 750 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 101 "parser.mly"
                            ( Block(List.rev _2) )
# 757 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 102 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 765 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 103 "parser.mly"
                                            ( If(_3, _5, _7) )
# 774 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 105 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 784 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 106 "parser.mly"
                                  ( While(_3, _5) )
# 792 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                            (SAssign(_1, _2, _4))
# 801 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "parser.mly"
                  ( Noexpr )
# 807 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                  ( _1 )
# 814 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 114 "parser.mly"
                     ( Literal(_1) )
# 821 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 115 "parser.mly"
                  ( FloatLiteral(_1) )
# 828 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
                     ( BoolLit(true) )
# 834 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser.mly"
                     ( BoolLit(false) )
# 840 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 118 "parser.mly"
                     ( Id(_1) )
# 847 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 119 "parser.mly"
                 ( MyStringLit(_1) )
# 854 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 862 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 870 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                    ( Binop(_1, Mult,  _3) )
# 878 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 886 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                  ( Binop(_1, Mod,   _3) )
# 894 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 902 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 910 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 918 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 926 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 934 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 942 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 950 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 958 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 134 "parser.mly"
                     ( Dotop(_1, _3) )
# 966 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 136 "parser.mly"
                     ( Castop(_4, _2) )
# 974 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                         ( Unop(Neg, _2) )
# 981 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                          ( Unop(Deref, _2) )
# 988 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
             ( Unop(Ref, _2) )
# 995 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                     ( Unop(Not, _2) )
# 1002 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                     ( Assign(_1, _3) )
# 1010 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 142 "parser.mly"
                                 ( Call(_1, _3) )
# 1018 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                       ( _2 )
# 1025 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "parser.mly"
                  ( [] )
# 1031 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 147 "parser.mly"
                  ( List.rev _1 )
# 1038 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
                            ( [_1] )
# 1045 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
                            ( _3 :: _1 )
# 1053 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
