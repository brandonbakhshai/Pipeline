type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LSBRACE
  | RSBRACE
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | MOD
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | CONCAT
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | VOID
  | STRING
  | STRUCT
  | GLOBAL
  | FLOAT
  | FILE
  | PIPE
  | FUNCTION
  | LISTEN
  | HTTP
  | ADDLEFT
  | ADDRIGHT
  | POPLEFT
  | POPRIGHT
  | LITERAL of (int)
  | FLOAT_LIT of (float)
  | STR_LIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
	open Ast;;

	let first   (a,_,_,_,_) = a;;
	let second  (_,b,_,_,_) = b;;
	let third   (_,_,c,_,_) = c;;
	let fourth  (_,_,_,d,_) = d;;
	let fifth   (_,_,_,_,e) = e;;
    let pipe_name = ref 0;;
# 68 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LSBRACE *);
  264 (* RSBRACE *);
  265 (* DOT *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* ASSIGN *);
  271 (* NOT *);
  272 (* MOD *);
  273 (* EQ *);
  274 (* NEQ *);
  275 (* LT *);
  276 (* LEQ *);
  277 (* GT *);
  278 (* GEQ *);
  279 (* TRUE *);
  280 (* FALSE *);
  281 (* AND *);
  282 (* OR *);
  283 (* CONCAT *);
  284 (* RETURN *);
  285 (* IF *);
  286 (* ELSE *);
  287 (* FOR *);
  288 (* WHILE *);
  289 (* INT *);
  290 (* BOOL *);
  291 (* VOID *);
  292 (* STRING *);
  293 (* STRUCT *);
  294 (* GLOBAL *);
  295 (* FLOAT *);
  296 (* FILE *);
  297 (* PIPE *);
  298 (* FUNCTION *);
  299 (* LISTEN *);
  300 (* HTTP *);
  301 (* ADDLEFT *);
  302 (* ADDRIGHT *);
  303 (* POPLEFT *);
  304 (* POPRIGHT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  305 (* LITERAL *);
  306 (* FLOAT_LIT *);
  307 (* STR_LIT *);
  308 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\007\000\
\009\000\011\000\010\000\010\000\012\000\012\000\006\000\014\000\
\005\000\016\000\016\000\017\000\017\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\008\000\008\000\003\000\003\000\
\013\000\013\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\019\000\019\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\020\000\020\000\021\000\
\021\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\002\000\002\000\006\000\
\008\000\009\000\000\000\002\000\000\000\001\000\005\000\003\000\
\009\000\000\000\001\000\002\000\004\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\000\000\002\000\004\000\006\000\
\000\000\002\000\002\000\002\000\003\000\003\000\005\000\007\000\
\009\000\005\000\003\000\005\000\005\000\000\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\003\000\004\000\
\003\000\004\000\006\000\006\000\004\000\000\000\001\000\001\000\
\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\082\000\000\000\000\000\033\000\000\000\000\000\
\049\000\050\000\000\000\000\000\000\000\000\000\022\000\023\000\
\024\000\025\000\000\000\000\000\026\000\027\000\000\000\000\000\
\000\000\000\000\000\000\048\000\052\000\053\000\000\000\001\000\
\003\000\004\000\005\000\006\000\007\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\073\000\038\000\034\000\037\000\
\000\000\000\000\000\000\000\000\029\000\028\000\000\000\000\000\
\014\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\000\000\000\000\067\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\077\000\072\000\000\000\074\000\000\000\000\000\000\000\000\000\
\042\000\000\000\030\000\000\000\000\000\000\000\015\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\044\000\000\000\
\000\000\008\000\000\000\032\000\000\000\020\000\000\000\000\000\
\075\000\076\000\040\000\000\000\016\000\000\000\033\000\000\000\
\000\000\000\000\000\000\021\000\041\000\011\000\017\000\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\010\000"

let yydgoto = "\002\000\
\003\000\004\000\033\000\079\000\035\000\036\000\037\000\121\000\
\089\000\176\000\178\000\090\000\041\000\139\000\038\000\145\000\
\146\000\039\000\083\000\096\000\097\000"

let yysindex = "\013\000\
\000\000\000\000\000\000\052\000\042\001\000\000\042\001\042\001\
\000\000\000\000\088\255\029\255\041\255\047\255\000\000\000\000\
\000\000\000\000\254\254\169\255\000\000\000\000\049\255\169\255\
\052\255\054\255\056\255\000\000\000\000\000\000\020\255\000\000\
\000\000\000\000\000\000\000\000\000\000\255\254\224\001\230\002\
\145\255\050\255\050\255\000\000\246\001\042\001\042\001\042\001\
\071\255\024\255\025\255\035\255\028\255\030\255\031\255\046\255\
\042\001\032\255\042\001\012\255\000\000\042\001\042\001\042\001\
\042\001\042\001\042\001\042\001\042\001\042\001\042\001\042\001\
\042\001\042\001\042\001\042\001\000\000\000\000\000\000\000\000\
\250\002\073\003\100\255\014\003\000\000\000\000\010\255\102\255\
\000\000\000\000\104\255\101\255\103\255\105\255\073\003\110\255\
\114\255\115\255\073\003\000\000\116\255\042\001\000\000\106\255\
\106\255\050\255\050\255\050\255\111\003\111\003\130\003\130\003\
\130\003\130\003\075\255\092\003\106\255\000\001\042\001\000\001\
\002\255\000\000\042\001\076\255\196\255\169\255\042\001\042\001\
\000\000\000\000\042\001\000\000\127\255\012\002\111\255\034\002\
\000\000\129\255\000\000\079\255\056\002\126\255\000\000\084\255\
\139\255\137\255\034\003\054\003\073\003\000\000\000\000\000\001\
\042\001\000\000\144\255\000\000\097\255\000\000\148\255\169\255\
\000\000\000\000\000\000\150\255\000\000\151\255\000\000\107\255\
\000\001\154\255\103\000\000\000\000\000\000\000\000\000\113\255\
\156\255\000\000\112\255\155\255\119\255\158\255\120\255\159\255\
\165\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\094\001\121\001\000\000\000\000\000\000\166\255\000\000\
\123\255\000\000\000\000\154\000\000\000\000\000\000\000\000\000\
\180\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\026\255\000\000\
\183\255\000\000\015\255\000\000\000\000\000\000\000\000\083\002\
\110\002\148\001\175\001\202\001\248\255\089\002\164\002\174\002\
\200\002\210\002\022\255\014\255\137\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\184\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\185\255\000\000\000\000\027\255\000\000\000\000\000\000\
\186\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\205\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\252\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\168\255\000\000\240\255\000\000\
\000\000\254\255\019\000\000\000\000\000"

let yytablesize = 1181
let yytable = "\034\000\
\039\000\125\000\040\000\051\000\042\000\043\000\138\000\053\000\
\045\000\047\000\122\000\047\000\100\000\001\000\065\000\071\000\
\065\000\071\000\101\000\065\000\071\000\057\000\064\000\123\000\
\064\000\102\000\058\000\064\000\080\000\081\000\046\000\080\000\
\081\000\059\000\015\000\016\000\017\000\018\000\050\000\065\000\
\021\000\022\000\047\000\081\000\082\000\084\000\064\000\064\000\
\048\000\049\000\060\000\032\000\052\000\054\000\095\000\055\000\
\099\000\056\000\062\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\115\000\
\116\000\117\000\085\000\086\000\087\000\088\000\171\000\091\000\
\098\000\092\000\093\000\062\000\063\000\064\000\065\000\066\000\
\044\000\005\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\094\000\007\000\134\000\119\000\076\000\008\000\124\000\
\140\000\126\000\127\000\129\000\128\000\144\000\009\000\010\000\
\130\000\135\000\062\000\137\000\136\000\065\000\066\000\131\000\
\141\000\067\000\132\000\133\000\147\000\148\000\142\000\150\000\
\149\000\154\000\155\000\157\000\025\000\026\000\027\000\158\000\
\028\000\029\000\030\000\031\000\152\000\159\000\160\000\168\000\
\165\000\166\000\005\000\163\000\006\000\078\000\082\000\167\000\
\169\000\170\000\174\000\007\000\177\000\179\000\172\000\008\000\
\181\000\185\000\180\000\183\000\173\000\186\000\046\000\009\000\
\010\000\182\000\184\000\164\000\011\000\012\000\028\000\013\000\
\014\000\015\000\016\000\017\000\018\000\050\000\078\000\021\000\
\022\000\079\000\018\000\019\000\046\000\025\000\026\000\027\000\
\000\000\028\000\029\000\030\000\031\000\005\000\000\000\006\000\
\143\000\015\000\016\000\017\000\018\000\050\000\007\000\021\000\
\022\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\010\000\000\000\000\000\000\000\011\000\
\012\000\000\000\013\000\014\000\015\000\016\000\017\000\018\000\
\050\000\000\000\021\000\022\000\000\000\000\000\000\000\000\000\
\025\000\026\000\027\000\000\000\028\000\029\000\030\000\031\000\
\058\000\000\000\058\000\000\000\000\000\058\000\000\000\000\000\
\000\000\000\000\039\000\000\000\039\000\039\000\000\000\000\000\
\058\000\058\000\000\000\039\000\000\000\000\000\000\000\039\000\
\058\000\058\000\000\000\000\000\000\000\000\000\000\000\039\000\
\039\000\000\000\000\000\000\000\039\000\039\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\000\000\000\000\039\000\039\000\039\000\
\000\000\039\000\039\000\039\000\039\000\005\000\000\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\
\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\010\000\000\000\000\000\000\000\011\000\
\012\000\000\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\024\000\000\000\000\000\
\025\000\026\000\027\000\000\000\028\000\029\000\030\000\031\000\
\005\000\000\000\006\000\175\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\010\000\000\000\
\000\000\000\000\011\000\012\000\000\000\013\000\014\000\015\000\
\016\000\017\000\018\000\050\000\000\000\021\000\022\000\000\000\
\000\000\000\000\000\000\025\000\026\000\027\000\000\000\028\000\
\029\000\030\000\031\000\013\000\000\000\013\000\013\000\000\000\
\000\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\013\000\000\000\000\000\000\000\013\000\013\000\000\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\000\000\
\013\000\013\000\000\000\000\000\000\000\000\000\013\000\013\000\
\013\000\000\000\013\000\013\000\013\000\013\000\009\000\000\000\
\009\000\009\000\000\000\000\000\000\000\000\000\000\000\009\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\000\009\000\000\000\000\000\000\000\
\009\000\009\000\000\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\000\000\009\000\009\000\000\000\000\000\000\000\
\000\000\009\000\009\000\009\000\000\000\009\000\009\000\009\000\
\009\000\005\000\000\000\006\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\000\000\008\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\010\000\
\000\000\000\000\000\000\011\000\012\000\000\000\013\000\014\000\
\015\000\016\000\017\000\018\000\050\000\000\000\021\000\022\000\
\000\000\000\000\000\000\005\000\025\000\026\000\027\000\000\000\
\028\000\029\000\030\000\031\000\007\000\000\000\000\000\000\000\
\008\000\000\000\051\000\000\000\051\000\000\000\000\000\051\000\
\009\000\010\000\051\000\051\000\051\000\051\000\051\000\000\000\
\000\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\000\000\000\000\051\000\051\000\051\000\000\000\025\000\026\000\
\027\000\000\000\028\000\029\000\030\000\031\000\069\000\000\000\
\069\000\000\000\000\000\069\000\000\000\000\000\000\000\069\000\
\069\000\069\000\069\000\000\000\000\000\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\000\000\000\000\069\000\069\000\
\069\000\070\000\000\000\070\000\000\000\000\000\070\000\000\000\
\000\000\000\000\070\000\070\000\070\000\070\000\000\000\000\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\000\000\
\000\000\070\000\070\000\070\000\056\000\000\000\056\000\000\000\
\000\000\056\000\000\000\000\000\000\000\056\000\056\000\056\000\
\056\000\000\000\000\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\000\000\000\000\056\000\056\000\056\000\057\000\
\000\000\057\000\000\000\000\000\057\000\000\000\000\000\000\000\
\057\000\057\000\057\000\057\000\000\000\000\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\000\000\000\000\057\000\
\057\000\057\000\066\000\000\000\066\000\000\000\000\000\066\000\
\000\000\000\000\000\000\066\000\066\000\066\000\066\000\000\000\
\000\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\061\000\000\000\066\000\066\000\066\000\000\000\000\000\000\000\
\062\000\063\000\064\000\065\000\066\000\000\000\000\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\080\000\000\000\
\074\000\075\000\076\000\000\000\000\000\000\000\062\000\063\000\
\064\000\065\000\066\000\000\000\000\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\151\000\000\000\074\000\075\000\
\076\000\000\000\000\000\000\000\062\000\063\000\064\000\065\000\
\066\000\000\000\000\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\153\000\000\000\074\000\075\000\076\000\000\000\
\000\000\000\000\062\000\063\000\064\000\065\000\066\000\000\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\156\000\000\000\074\000\075\000\076\000\000\000\000\000\000\000\
\062\000\063\000\064\000\065\000\066\000\000\000\000\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\000\000\000\000\
\074\000\075\000\076\000\054\000\000\000\054\000\000\000\000\000\
\054\000\059\000\000\000\059\000\054\000\054\000\059\000\000\000\
\000\000\000\000\000\000\054\000\054\000\054\000\054\000\054\000\
\054\000\059\000\059\000\054\000\054\000\054\000\055\000\000\000\
\055\000\059\000\059\000\055\000\000\000\000\000\000\000\055\000\
\055\000\000\000\000\000\000\000\000\000\000\000\055\000\055\000\
\055\000\055\000\055\000\055\000\000\000\000\000\055\000\055\000\
\055\000\068\000\000\000\068\000\000\000\000\000\068\000\000\000\
\000\000\000\000\068\000\068\000\000\000\000\000\000\000\000\000\
\000\000\068\000\068\000\068\000\068\000\068\000\068\000\000\000\
\000\000\068\000\068\000\068\000\060\000\000\000\060\000\000\000\
\000\000\060\000\000\000\000\000\000\000\000\000\061\000\000\000\
\061\000\000\000\000\000\061\000\060\000\060\000\060\000\060\000\
\060\000\060\000\000\000\000\000\060\000\060\000\061\000\061\000\
\061\000\061\000\061\000\061\000\000\000\000\000\061\000\061\000\
\062\000\000\000\062\000\000\000\000\000\062\000\000\000\000\000\
\000\000\000\000\063\000\000\000\063\000\000\000\000\000\063\000\
\062\000\062\000\062\000\062\000\062\000\062\000\000\000\000\000\
\062\000\062\000\063\000\063\000\063\000\063\000\063\000\063\000\
\077\000\000\000\063\000\063\000\000\000\000\000\062\000\063\000\
\064\000\065\000\066\000\000\000\000\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\118\000\000\000\074\000\075\000\
\076\000\000\000\062\000\063\000\064\000\065\000\066\000\000\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\120\000\000\000\074\000\075\000\076\000\000\000\062\000\063\000\
\064\000\065\000\066\000\000\000\000\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\161\000\000\000\074\000\075\000\
\076\000\000\000\062\000\063\000\064\000\065\000\066\000\000\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\162\000\000\000\074\000\075\000\076\000\000\000\062\000\063\000\
\064\000\065\000\066\000\000\000\000\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\000\000\000\000\074\000\075\000\
\076\000\062\000\063\000\064\000\065\000\066\000\000\000\000\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\000\000\
\000\000\074\000\075\000\076\000\062\000\063\000\064\000\065\000\
\066\000\000\000\000\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\000\000\000\000\074\000\000\000\076\000\062\000\
\063\000\064\000\065\000\066\000\000\000\000\000\067\000\000\000\
\000\000\070\000\071\000\072\000\073\000\000\000\000\000\000\000\
\000\000\076\000\062\000\063\000\064\000\065\000\066\000\000\000\
\000\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\076\000"

let yycheck = "\004\000\
\000\000\090\000\005\000\020\000\007\000\008\000\005\001\024\000\
\011\000\001\001\001\001\003\001\001\001\001\000\001\001\001\001\
\003\001\003\001\007\001\006\001\006\001\002\001\001\001\014\001\
\003\001\014\001\007\001\006\001\003\001\003\001\002\001\006\001\
\006\001\014\001\033\001\034\001\035\001\036\001\037\001\026\001\
\039\001\040\001\002\001\046\000\047\000\048\000\025\001\026\001\
\002\001\052\001\052\001\000\000\004\001\002\001\057\000\002\001\
\059\000\002\001\009\001\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\004\001\052\001\052\001\043\001\167\000\052\001\
\049\001\052\001\052\001\009\001\010\001\011\001\012\001\013\001\
\001\001\002\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\052\001\011\001\102\000\001\001\027\001\015\001\002\001\
\121\000\002\001\006\001\003\001\006\001\126\000\023\001\024\001\
\003\001\118\000\009\001\120\000\119\000\012\001\013\001\006\001\
\123\000\016\001\008\001\008\001\127\000\128\000\051\001\001\001\
\131\000\001\001\052\001\006\001\045\001\046\001\047\001\052\001\
\049\001\050\001\051\001\052\001\030\001\003\001\006\001\160\000\
\001\001\049\001\002\001\152\000\004\001\005\001\153\000\004\001\
\003\001\003\001\001\001\011\001\044\001\002\001\052\001\015\001\
\006\001\003\001\051\001\006\001\169\000\001\001\001\001\023\001\
\024\001\051\001\051\001\153\000\028\001\029\001\052\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\003\001\039\001\
\040\001\003\001\003\001\003\001\003\001\045\001\046\001\047\001\
\255\255\049\001\050\001\051\001\052\001\002\001\255\255\004\001\
\005\001\033\001\034\001\035\001\036\001\037\001\011\001\039\001\
\040\001\255\255\015\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\024\001\255\255\255\255\255\255\028\001\
\029\001\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\039\001\040\001\255\255\255\255\255\255\255\255\
\045\001\046\001\047\001\255\255\049\001\050\001\051\001\052\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\255\255\255\255\002\001\255\255\004\001\005\001\255\255\255\255\
\017\001\018\001\255\255\011\001\255\255\255\255\255\255\015\001\
\025\001\026\001\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\255\255\255\255\255\255\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\045\001\046\001\047\001\
\255\255\049\001\050\001\051\001\052\001\002\001\255\255\004\001\
\255\255\255\255\255\255\255\255\255\255\255\255\011\001\255\255\
\255\255\255\255\015\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\024\001\255\255\255\255\255\255\028\001\
\029\001\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\255\255\255\255\
\045\001\046\001\047\001\255\255\049\001\050\001\051\001\052\001\
\002\001\255\255\004\001\005\001\255\255\255\255\255\255\255\255\
\255\255\011\001\255\255\255\255\255\255\015\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\023\001\024\001\255\255\
\255\255\255\255\028\001\029\001\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\255\255\039\001\040\001\255\255\
\255\255\255\255\255\255\045\001\046\001\047\001\255\255\049\001\
\050\001\051\001\052\001\002\001\255\255\004\001\005\001\255\255\
\255\255\255\255\255\255\255\255\011\001\255\255\255\255\255\255\
\015\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\255\255\255\255\255\255\028\001\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\255\255\
\039\001\040\001\255\255\255\255\255\255\255\255\045\001\046\001\
\047\001\255\255\049\001\050\001\051\001\052\001\002\001\255\255\
\004\001\005\001\255\255\255\255\255\255\255\255\255\255\011\001\
\255\255\255\255\255\255\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\023\001\024\001\255\255\255\255\255\255\
\028\001\029\001\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\255\255\039\001\040\001\255\255\255\255\255\255\
\255\255\045\001\046\001\047\001\255\255\049\001\050\001\051\001\
\052\001\002\001\255\255\004\001\255\255\255\255\255\255\255\255\
\255\255\255\255\011\001\255\255\255\255\255\255\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\023\001\024\001\
\255\255\255\255\255\255\028\001\029\001\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\039\001\040\001\
\255\255\255\255\255\255\002\001\045\001\046\001\047\001\255\255\
\049\001\050\001\051\001\052\001\011\001\255\255\255\255\255\255\
\015\001\255\255\001\001\255\255\003\001\255\255\255\255\006\001\
\023\001\024\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\025\001\026\001\027\001\255\255\045\001\046\001\
\047\001\255\255\049\001\050\001\051\001\052\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\025\001\026\001\
\027\001\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\027\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\027\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\025\001\
\026\001\027\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\001\001\255\255\025\001\026\001\027\001\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\001\001\255\255\
\025\001\026\001\027\001\255\255\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\001\001\255\255\025\001\026\001\
\027\001\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\001\001\255\255\025\001\026\001\027\001\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\001\001\255\255\025\001\026\001\027\001\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\025\001\026\001\027\001\001\001\255\255\003\001\255\255\255\255\
\006\001\001\001\255\255\003\001\010\001\011\001\006\001\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\017\001\018\001\025\001\026\001\027\001\001\001\255\255\
\003\001\025\001\026\001\006\001\255\255\255\255\255\255\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\025\001\026\001\
\027\001\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\255\255\255\255\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\027\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\255\255\255\255\001\001\255\255\
\003\001\255\255\255\255\006\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\025\001\026\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\255\255\255\255\001\001\255\255\003\001\255\255\255\255\006\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\025\001\026\001\017\001\018\001\019\001\020\001\021\001\022\001\
\003\001\255\255\025\001\026\001\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\003\001\255\255\025\001\026\001\
\027\001\255\255\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\003\001\255\255\025\001\026\001\027\001\255\255\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\003\001\255\255\025\001\026\001\
\027\001\255\255\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\003\001\255\255\025\001\026\001\027\001\255\255\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\025\001\026\001\
\027\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\027\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\025\001\255\255\027\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\255\255\255\255\255\255\
\255\255\027\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LSBRACE\000\
  RSBRACE\000\
  DOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  MOD\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  CONCAT\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  VOID\000\
  STRING\000\
  STRUCT\000\
  GLOBAL\000\
  FLOAT\000\
  FILE\000\
  PIPE\000\
  FUNCTION\000\
  LISTEN\000\
  HTTP\000\
  ADDLEFT\000\
  ADDRIGHT\000\
  POPLEFT\000\
  POPRIGHT\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  FLOAT_LIT\000\
  STR_LIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 44 "parser.mly"
                     ( _1 )
# 609 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
                    ( [], [], [], [], [] )
# 615 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'global) in
    Obj.repr(
# 48 "parser.mly"
                   ( (_2 :: first _1), second _1, third _1, fourth _1, fifth _1 )
# 623 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 49 "parser.mly"
                    ( first _1, (_2 :: second _1), third _1, fourth _1, fifth _1 )
# 631 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 50 "parser.mly"
                    ( first _1, second _1, (_2 :: third _1), fourth _1, fifth _1 )
# 639 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pdecl) in
    Obj.repr(
# 51 "parser.mly"
                    ( first _1, second _1, third _1, (_2 :: fourth _1), fifth _1 )
# 647 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sdecl) in
    Obj.repr(
# 52 "parser.mly"
                    ( first _1, second _1, third _1, fourth _1, (_2 :: fifth _1) )
# 655 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    Obj.repr(
# 56 "parser.mly"
( {
	sname = _2;
	vars = List.rev _4;
} )
# 666 "parser.ml"
               : 'sdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'http_list) in
    Obj.repr(
# 64 "parser.mly"
({
	arg1 = _3;
	arg2 = _5;
	arg3 = _8;
})
# 679 "parser.ml"
               : 'listen))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 72 "parser.mly"
    ({ 
        httpArg1 = _3; 
        httpArg2 = _5;
        httpArg3 = _7;
    })
# 692 "parser.ml"
               : 'http))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
                        ([])
# 698 "parser.ml"
               : 'http_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'http_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'http) in
    Obj.repr(
# 80 "parser.mly"
                        ( _2 :: _1)
# 706 "parser.ml"
               : 'http_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                    ( [] )
# 712 "parser.ml"
               : 'listen_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'listen) in
    Obj.repr(
# 84 "parser.mly"
               ( [_1] )
# 719 "parser.ml"
               : 'listen_opt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'listen_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 89 "parser.mly"
( 
    pipe_name := !pipe_name + 1;
    { 
    	pname = "pipe_" ^ string_of_int !pipe_name;
    	listen = _3;
    	body = List.rev _4;
    }
)
# 734 "parser.ml"
               : 'pdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 99 "parser.mly"
                ((_1,_2, Noexpr))
# 742 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 106 "parser.mly"
( { 
	typ = _2;
	fname = _3;
	formals = _5;
	body = List.rev _8 
} )
# 757 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
              ( [] )
# 763 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 115 "parser.mly"
                ( List.rev _1 )
# 770 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 118 "parser.mly"
                         ( [(_1,_2)] )
# 778 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 119 "parser.mly"
                           ( (_3,_4) :: _1 )
# 787 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "parser.mly"
            ( Int )
# 793 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "parser.mly"
            ( Bool )
# 799 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 124 "parser.mly"
            ( Void )
# 805 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "parser.mly"
            ( MyString )
# 811 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parser.mly"
            ( Float )
# 817 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parser.mly"
            ( File )
# 823 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 128 "parser.mly"
            ( Struct(_2) )
# 830 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
                 ( [] )
# 836 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 132 "parser.mly"
                   ( _2 :: _1 )
# 844 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 135 "parser.mly"
                     ( (_2, _3, Noexpr) )
# 852 "parser.ml"
               : 'global))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                                 ( (_2,_3,_5) )
# 861 "parser.ml"
               : 'global))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "parser.mly"
               ( [] )
# 867 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 141 "parser.mly"
                 ( _2 :: _1 )
# 875 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                                                              ( Expr _1 )
# 882 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "parser.mly"
                                                              ( Return Noexpr )
# 888 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                                                              ( Return _2 )
# 895 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 148 "parser.mly"
                                                              ( Block(List.rev _2) )
# 902 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 149 "parser.mly"
                                                              ( If(_3, _5, Block([])) )
# 910 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 150 "parser.mly"
                                                              ( If(_3, _5, _7) )
# 919 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 151 "parser.mly"
                                                              ( For(_3, _5, _7, _9) )
# 929 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 152 "parser.mly"
                                                              ( While(_3, _5) )
# 937 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 153 "parser.mly"
                                                                (Local(_1,_2, Noexpr))
# 945 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
                                                          (Local(_1,_2,_4))
# 954 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 155 "parser.mly"
                                                          (List(List_t(_1),_2))
# 962 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 158 "parser.mly"
              ( Noexpr )
# 968 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "parser.mly"
                ( _1 )
# 975 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 162 "parser.mly"
                                ( Literal(_1) )
# 982 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "parser.mly"
                                ( BoolLit(true) )
# 988 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 164 "parser.mly"
                                ( BoolLit(false) )
# 994 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 165 "parser.mly"
                                ( Id(_1) )
# 1001 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 166 "parser.mly"
                                ( FloatLit(_1) )
# 1008 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 167 "parser.mly"
                                ( MyStringLit(_1) )
# 1015 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                                ( Binop(_1, Add,   _3) )
# 1023 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
                                ( Binop(_1, Sub,   _3) )
# 1031 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
                                ( Binop(_1, Mult,  _3) )
# 1039 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
                                ( Binop(_1, Div,   _3) )
# 1047 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
                                ( Binop(_1, Equal, _3) )
# 1055 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
                                ( Binop(_1, Neq,   _3) )
# 1063 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "parser.mly"
                                ( Binop(_1, Less,  _3) )
# 1071 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                                ( Binop(_1, Leq,   _3) )
# 1079 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 176 "parser.mly"
                                ( Binop(_1, Greater, _3) )
# 1087 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
                                ( Binop(_1, Geq,   _3) )
# 1095 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "parser.mly"
                                ( Binop(_1, And,   _3) )
# 1103 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
                                ( Binop(_1, Or,    _3) )
# 1111 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
                                ( Binop(_1, Mod,   _3) )
# 1119 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 181 "parser.mly"
                                ( StructAccess(_1, _3) )
# 1127 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                                ( Concat(_1,_3) )
# 1135 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
                                ( Unop(Neg, _2) )
# 1142 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 184 "parser.mly"
                                ( Unop(Not, _2) )
# 1149 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
                                ( Assign(_1, _3) )
# 1157 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 186 "parser.mly"
                                ( Call(_1, _3) )
# 1165 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
                                ( _2 )
# 1172 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 188 "parser.mly"
                                ( Access(_1,_3) )
# 1180 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 189 "parser.mly"
                                       (Addleft(_3,_5))
# 1188 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 190 "parser.mly"
                                       (Addright(_3,_5))
# 1196 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 191 "parser.mly"
                             (Popleft(_3))
# 1203 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 196 "parser.mly"
              ( [] )
# 1209 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 197 "parser.mly"
                ( List.rev _1 )
# 1216 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 200 "parser.mly"
                        ( [_1] )
# 1223 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 201 "parser.mly"
                          ( _3 :: _1 )
# 1231 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
