type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | VOID
  | STRING
  | STRUCT
  | GLOBAL
  | PIPE
  | FUNCTION
  | LIST
  | ADDLEFT
  | ADDRIGHT
  | FINDNODE
  | LISTEN
  | HTTPGET
  | HTTPPUT
  | HTTPDELETE
  | HTTPPOST
  | LITERAL of (int)
  | STR_LIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
	open Ast;;

	let first   (a,_,_,_,_) = a;;
	let second  (_,b,_,_,_) = b;;
	let third   (_,_,c,_,_) = c;;
	let fourth  (_,_,_,d,_) = d;;
	let fifth   (_,_,_,_,e) = e;;
	
# 63 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIVIDE *);
  267 (* ASSIGN *);
  268 (* NOT *);
  269 (* EQ *);
  270 (* NEQ *);
  271 (* LT *);
  272 (* LEQ *);
  273 (* GT *);
  274 (* GEQ *);
  275 (* TRUE *);
  276 (* FALSE *);
  277 (* AND *);
  278 (* OR *);
  279 (* RETURN *);
  280 (* IF *);
  281 (* ELSE *);
  282 (* FOR *);
  283 (* WHILE *);
  284 (* INT *);
  285 (* BOOL *);
  286 (* VOID *);
  287 (* STRING *);
  288 (* STRUCT *);
  289 (* GLOBAL *);
  290 (* PIPE *);
  291 (* FUNCTION *);
  292 (* LIST *);
  293 (* ADDLEFT *);
  294 (* ADDRIGHT *);
  295 (* FINDNODE *);
  296 (* LISTEN *);
  297 (* HTTPGET *);
  298 (* HTTPPUT *);
  299 (* HTTPDELETE *);
  300 (* HTTPPOST *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  301 (* LITERAL *);
  302 (* STR_LIT *);
  303 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\008\000\
\008\000\009\000\009\000\007\000\011\000\012\000\012\000\006\000\
\014\000\005\000\016\000\016\000\017\000\017\000\015\000\015\000\
\015\000\015\000\010\000\010\000\003\000\003\000\013\000\013\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\019\000\019\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\020\000\020\000\021\000\021\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\002\000\002\000\001\000\
\003\000\001\000\003\000\005\000\007\000\000\000\001\000\006\000\
\002\000\009\000\000\000\001\000\002\000\004\000\001\000\001\000\
\001\000\001\000\000\000\002\000\004\000\006\000\000\000\002\000\
\002\000\002\000\003\000\003\000\005\000\007\000\009\000\005\000\
\008\000\008\000\007\000\007\000\009\000\007\000\007\000\007\000\
\007\000\003\000\005\000\000\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\003\000\004\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\080\000\000\000\000\000\031\000\000\000\000\000\
\055\000\056\000\000\000\000\000\000\000\000\000\023\000\024\000\
\025\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\054\000\058\000\
\000\000\001\000\003\000\004\000\005\000\006\000\007\000\000\000\
\000\000\000\000\000\000\071\000\072\000\034\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\075\000\036\000\
\032\000\035\000\000\000\000\000\000\000\000\000\027\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\000\000\
\000\000\000\000\061\000\062\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\000\000\015\000\031\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\074\000\
\000\000\000\000\000\000\000\000\040\000\012\000\028\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\000\000\000\000\017\000\030\000\000\000\016\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\000\000\000\000\
\031\000\000\000\000\000\000\000\000\000\000\000\043\000\044\000\
\000\000\046\000\047\000\048\000\049\000\000\000\000\000\000\000\
\022\000\009\000\042\000\011\000\041\000\000\000\039\000\000\000\
\018\000\045\000\013\000"

let yydgoto = "\002\000\
\003\000\004\000\035\000\081\000\037\000\038\000\039\000\172\000\
\174\000\120\000\124\000\125\000\043\000\143\000\040\000\149\000\
\150\000\041\000\085\000\100\000\101\000"

let yysindex = "\018\000\
\000\000\000\000\000\000\047\000\080\255\000\000\080\255\080\255\
\000\000\000\000\010\255\029\255\030\255\046\255\000\000\000\000\
\000\000\000\000\253\254\088\255\034\255\088\255\036\255\065\255\
\099\255\101\255\105\255\107\255\108\255\109\255\000\000\000\000\
\043\255\000\000\000\000\000\000\000\000\000\000\000\000\067\255\
\250\000\214\001\162\255\000\000\000\000\000\000\012\001\080\255\
\080\255\080\255\117\255\075\255\119\255\081\255\118\255\080\255\
\080\255\080\255\080\255\080\255\080\255\080\255\080\255\080\255\
\005\255\000\000\080\255\080\255\080\255\080\255\080\255\080\255\
\080\255\080\255\080\255\080\255\080\255\080\255\000\000\000\000\
\000\000\000\000\230\001\133\255\129\255\246\001\000\000\042\255\
\098\255\142\255\018\255\119\002\136\002\153\002\170\002\187\002\
\204\002\221\002\133\255\150\255\151\255\133\255\000\000\080\255\
\015\255\015\255\000\000\000\000\025\003\025\003\152\255\152\255\
\152\255\152\255\013\003\254\002\185\000\080\255\185\000\009\255\
\000\000\080\255\143\255\000\000\000\000\088\255\154\255\161\255\
\080\255\080\255\080\255\080\255\080\255\080\255\080\255\000\000\
\080\255\030\001\144\255\048\001\000\000\000\000\000\000\121\255\
\066\001\125\255\208\255\126\255\169\255\170\255\130\255\131\255\
\006\002\022\002\238\002\038\002\054\002\070\002\086\002\133\255\
\000\000\185\000\080\255\000\000\000\000\172\255\000\000\000\000\
\176\255\088\255\177\255\181\255\189\255\184\255\195\255\196\255\
\080\255\201\255\210\255\213\255\214\255\000\000\215\255\174\255\
\000\000\175\255\130\255\216\255\131\255\220\255\000\000\000\000\
\102\002\000\000\000\000\000\000\000\000\185\000\221\255\093\000\
\000\000\000\000\000\000\000\000\000\000\222\255\000\000\224\255\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\232\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\225\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\226\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\255\000\000\000\000\000\000\000\000\
\139\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\091\255\000\000\227\255\084\255\000\000\000\000\
\088\001\110\001\000\000\000\000\014\255\020\255\132\001\154\001\
\176\001\198\001\083\255\090\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\230\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\237\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\092\255\
\000\000\000\000\239\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\240\255\000\000\245\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\252\255\000\000\000\000\000\000\054\000\
\067\000\000\000\000\000\000\000\139\255\000\000\238\255\000\000\
\000\000\002\000\094\000\000\000\000\000"

let yytablesize = 1067
let yytable = "\036\000\
\037\000\052\000\053\000\054\000\053\000\103\000\042\000\147\000\
\044\000\045\000\046\000\005\000\047\000\142\000\063\000\104\000\
\063\000\007\000\001\000\063\000\064\000\008\000\064\000\069\000\
\070\000\064\000\063\000\063\000\009\000\010\000\048\000\049\000\
\064\000\064\000\063\000\063\000\015\000\016\000\017\000\018\000\
\064\000\064\000\121\000\051\000\063\000\127\000\034\000\050\000\
\128\000\083\000\084\000\086\000\122\000\064\000\031\000\032\000\
\033\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\102\000\056\000\200\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\114\000\115\000\116\000\
\053\000\005\000\055\000\069\000\073\000\069\000\073\000\007\000\
\069\000\073\000\070\000\008\000\070\000\078\000\079\000\070\000\
\078\000\079\000\009\000\010\000\057\000\144\000\058\000\069\000\
\069\000\138\000\059\000\148\000\060\000\061\000\062\000\070\000\
\139\000\065\000\141\000\015\000\016\000\017\000\018\000\140\000\
\087\000\088\000\089\000\145\000\031\000\032\000\033\000\090\000\
\091\000\118\000\153\000\154\000\155\000\156\000\157\000\158\000\
\159\000\123\000\160\000\067\000\068\000\069\000\070\000\126\000\
\146\000\071\000\072\000\073\000\074\000\075\000\076\000\186\000\
\136\000\077\000\078\000\151\000\137\000\182\000\067\000\068\000\
\069\000\070\000\152\000\005\000\084\000\006\000\080\000\164\000\
\162\000\007\000\166\000\169\000\168\000\008\000\171\000\170\000\
\173\000\184\000\193\000\185\000\009\000\010\000\187\000\188\000\
\011\000\012\000\190\000\013\000\014\000\015\000\016\000\017\000\
\018\000\207\000\189\000\191\000\192\000\023\000\024\000\025\000\
\026\000\194\000\027\000\028\000\029\000\030\000\031\000\032\000\
\033\000\005\000\195\000\006\000\167\000\196\000\197\000\007\000\
\203\000\198\000\199\000\008\000\205\000\201\000\210\000\208\000\
\211\000\052\000\009\000\010\000\076\000\077\000\011\000\012\000\
\019\000\013\000\014\000\015\000\016\000\017\000\018\000\020\000\
\202\000\052\000\008\000\023\000\024\000\025\000\026\000\010\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\204\000\
\183\000\000\000\037\000\000\000\037\000\037\000\000\000\000\000\
\037\000\000\000\000\000\000\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\037\000\037\000\000\000\000\000\037\000\
\037\000\000\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\000\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\005\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\
\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\000\010\000\000\000\000\000\011\000\012\000\000\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\000\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\005\000\000\000\
\006\000\209\000\000\000\000\000\007\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\010\000\000\000\000\000\011\000\012\000\000\000\013\000\014\000\
\015\000\016\000\017\000\018\000\000\000\000\000\000\000\000\000\
\023\000\024\000\025\000\026\000\000\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\014\000\000\000\014\000\014\000\
\000\000\000\000\014\000\000\000\000\000\000\000\014\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\000\014\000\000\000\
\000\000\014\000\014\000\000\000\014\000\014\000\014\000\014\000\
\014\000\014\000\000\000\000\000\000\000\000\000\014\000\014\000\
\014\000\014\000\000\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\005\000\000\000\006\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\000\010\000\000\000\000\000\011\000\
\012\000\000\000\013\000\014\000\015\000\016\000\017\000\018\000\
\000\000\000\000\000\000\000\000\023\000\024\000\025\000\026\000\
\000\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\057\000\000\000\057\000\000\000\000\000\057\000\057\000\057\000\
\057\000\057\000\000\000\000\000\057\000\057\000\057\000\057\000\
\057\000\057\000\066\000\000\000\057\000\057\000\000\000\000\000\
\067\000\068\000\069\000\070\000\000\000\000\000\071\000\072\000\
\073\000\074\000\075\000\076\000\082\000\000\000\077\000\078\000\
\000\000\000\000\067\000\068\000\069\000\070\000\000\000\000\000\
\071\000\072\000\073\000\074\000\075\000\076\000\161\000\000\000\
\077\000\078\000\000\000\000\000\067\000\068\000\069\000\070\000\
\000\000\000\000\071\000\072\000\073\000\074\000\075\000\076\000\
\163\000\000\000\077\000\078\000\000\000\000\000\067\000\068\000\
\069\000\070\000\000\000\000\000\071\000\072\000\073\000\074\000\
\075\000\076\000\165\000\000\000\077\000\078\000\000\000\000\000\
\067\000\068\000\069\000\070\000\000\000\000\000\071\000\072\000\
\073\000\074\000\075\000\076\000\000\000\000\000\077\000\078\000\
\059\000\000\000\059\000\000\000\000\000\059\000\059\000\059\000\
\000\000\000\000\000\000\000\000\059\000\059\000\059\000\059\000\
\059\000\059\000\000\000\000\000\059\000\059\000\060\000\000\000\
\060\000\000\000\000\000\060\000\060\000\060\000\000\000\000\000\
\000\000\000\000\060\000\060\000\060\000\060\000\060\000\060\000\
\000\000\000\000\060\000\060\000\065\000\000\000\065\000\000\000\
\000\000\065\000\000\000\000\000\000\000\000\000\000\000\000\000\
\065\000\065\000\065\000\065\000\065\000\065\000\000\000\000\000\
\065\000\065\000\066\000\000\000\066\000\000\000\000\000\066\000\
\000\000\000\000\000\000\000\000\000\000\000\000\066\000\066\000\
\066\000\066\000\066\000\066\000\000\000\000\000\066\000\066\000\
\067\000\000\000\067\000\000\000\000\000\067\000\000\000\000\000\
\000\000\000\000\000\000\000\000\067\000\067\000\067\000\067\000\
\067\000\067\000\000\000\000\000\067\000\067\000\068\000\000\000\
\068\000\000\000\000\000\068\000\000\000\000\000\000\000\000\000\
\000\000\000\000\068\000\068\000\068\000\068\000\068\000\068\000\
\079\000\000\000\068\000\068\000\067\000\068\000\069\000\070\000\
\000\000\000\000\071\000\072\000\073\000\074\000\075\000\076\000\
\117\000\000\000\077\000\078\000\067\000\068\000\069\000\070\000\
\000\000\000\000\071\000\072\000\073\000\074\000\075\000\076\000\
\119\000\000\000\077\000\078\000\067\000\068\000\069\000\070\000\
\000\000\000\000\071\000\072\000\073\000\074\000\075\000\076\000\
\175\000\000\000\077\000\078\000\067\000\068\000\069\000\070\000\
\000\000\000\000\071\000\072\000\073\000\074\000\075\000\076\000\
\176\000\000\000\077\000\078\000\067\000\068\000\069\000\070\000\
\000\000\000\000\071\000\072\000\073\000\074\000\075\000\076\000\
\178\000\000\000\077\000\078\000\067\000\068\000\069\000\070\000\
\000\000\000\000\071\000\072\000\073\000\074\000\075\000\076\000\
\179\000\000\000\077\000\078\000\067\000\068\000\069\000\070\000\
\000\000\000\000\071\000\072\000\073\000\074\000\075\000\076\000\
\180\000\000\000\077\000\078\000\067\000\068\000\069\000\070\000\
\000\000\000\000\071\000\072\000\073\000\074\000\075\000\076\000\
\181\000\000\000\077\000\078\000\067\000\068\000\069\000\070\000\
\000\000\000\000\071\000\072\000\073\000\074\000\075\000\076\000\
\206\000\000\000\077\000\078\000\067\000\068\000\069\000\070\000\
\000\000\000\000\071\000\072\000\073\000\074\000\075\000\076\000\
\000\000\000\000\077\000\078\000\129\000\067\000\068\000\069\000\
\070\000\000\000\000\000\071\000\072\000\073\000\074\000\075\000\
\076\000\000\000\000\000\077\000\078\000\130\000\067\000\068\000\
\069\000\070\000\000\000\000\000\071\000\072\000\073\000\074\000\
\075\000\076\000\000\000\000\000\077\000\078\000\131\000\067\000\
\068\000\069\000\070\000\000\000\000\000\071\000\072\000\073\000\
\074\000\075\000\076\000\000\000\000\000\077\000\078\000\132\000\
\067\000\068\000\069\000\070\000\000\000\000\000\071\000\072\000\
\073\000\074\000\075\000\076\000\000\000\000\000\077\000\078\000\
\133\000\067\000\068\000\069\000\070\000\000\000\000\000\071\000\
\072\000\073\000\074\000\075\000\076\000\000\000\000\000\077\000\
\078\000\134\000\067\000\068\000\069\000\070\000\000\000\000\000\
\071\000\072\000\073\000\074\000\075\000\076\000\000\000\000\000\
\077\000\078\000\135\000\067\000\068\000\069\000\070\000\000\000\
\000\000\071\000\072\000\073\000\074\000\075\000\076\000\000\000\
\000\000\077\000\078\000\177\000\067\000\068\000\069\000\070\000\
\000\000\000\000\071\000\072\000\073\000\074\000\075\000\076\000\
\000\000\000\000\077\000\078\000\067\000\068\000\069\000\070\000\
\000\000\000\000\071\000\072\000\073\000\074\000\075\000\076\000\
\000\000\000\000\077\000\067\000\068\000\069\000\070\000\000\000\
\000\000\071\000\072\000\073\000\074\000\075\000\076\000\067\000\
\068\000\069\000\070\000\000\000\000\000\000\000\000\000\073\000\
\074\000\075\000\076\000"

let yycheck = "\004\000\
\000\000\020\000\001\001\022\000\003\001\001\001\005\000\125\000\
\007\000\008\000\001\001\002\001\011\000\005\001\001\001\011\001\
\003\001\008\001\001\000\006\001\001\001\012\001\003\001\009\001\
\010\001\006\001\013\001\014\001\019\001\020\001\002\001\002\001\
\013\001\014\001\021\001\022\001\028\001\029\001\030\001\031\001\
\021\001\022\001\001\001\047\001\002\001\028\001\000\000\002\001\
\031\001\048\000\049\000\050\000\011\001\011\001\045\001\046\001\
\047\001\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\002\001\185\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\047\001\002\001\047\001\001\001\001\001\003\001\003\001\008\001\
\006\001\006\001\001\001\012\001\003\001\003\001\003\001\006\001\
\006\001\006\001\019\001\020\001\002\001\120\000\002\001\021\001\
\022\001\104\000\002\001\126\000\002\001\002\001\002\001\022\001\
\117\000\047\001\119\000\028\001\029\001\030\001\031\001\118\000\
\004\001\047\001\004\001\122\000\045\001\046\001\047\001\047\001\
\011\001\001\001\129\000\130\000\131\000\132\000\133\000\134\000\
\135\000\040\001\137\000\007\001\008\001\009\001\010\001\002\001\
\002\001\013\001\014\001\015\001\016\001\017\001\018\001\170\000\
\003\001\021\001\022\001\002\001\006\001\162\000\007\001\008\001\
\009\001\010\001\002\001\002\001\163\000\004\001\005\001\047\001\
\025\001\008\001\046\001\003\001\047\001\012\001\045\001\006\001\
\046\001\006\001\177\000\004\001\019\001\020\001\006\001\003\001\
\023\001\024\001\003\001\026\001\027\001\028\001\029\001\030\001\
\031\001\198\000\006\001\001\001\001\001\036\001\037\001\038\001\
\039\001\001\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\002\001\001\001\004\001\005\001\001\001\001\001\008\001\
\001\001\003\001\045\001\012\001\001\001\047\001\001\001\003\001\
\001\001\001\001\019\001\020\001\003\001\003\001\023\001\024\001\
\003\001\026\001\027\001\028\001\029\001\030\001\031\001\003\001\
\187\000\003\001\003\001\036\001\037\001\038\001\039\001\003\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\189\000\
\163\000\255\255\002\001\255\255\004\001\005\001\255\255\255\255\
\008\001\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\023\001\
\024\001\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\255\255\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\002\001\255\255\004\001\255\255\255\255\255\255\008\001\255\255\
\255\255\255\255\012\001\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\020\001\255\255\255\255\023\001\024\001\255\255\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\255\255\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\002\001\255\255\
\004\001\005\001\255\255\255\255\008\001\255\255\255\255\255\255\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\255\255\255\255\023\001\024\001\255\255\026\001\027\001\
\028\001\029\001\030\001\031\001\255\255\255\255\255\255\255\255\
\036\001\037\001\038\001\039\001\255\255\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\002\001\255\255\004\001\005\001\
\255\255\255\255\008\001\255\255\255\255\255\255\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\255\255\
\255\255\023\001\024\001\255\255\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\255\255\036\001\037\001\
\038\001\039\001\255\255\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\002\001\255\255\004\001\255\255\255\255\255\255\
\008\001\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\023\001\
\024\001\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\255\255\255\255\255\255\036\001\037\001\038\001\039\001\
\255\255\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\001\001\255\255\003\001\255\255\255\255\006\001\007\001\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\001\001\255\255\021\001\022\001\255\255\255\255\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\001\001\255\255\021\001\022\001\
\255\255\255\255\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\001\001\255\255\
\021\001\022\001\255\255\255\255\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\001\001\255\255\021\001\022\001\255\255\255\255\007\001\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\001\001\255\255\021\001\022\001\255\255\255\255\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\021\001\022\001\
\001\001\255\255\003\001\255\255\255\255\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\021\001\022\001\001\001\255\255\
\003\001\255\255\255\255\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\021\001\022\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\255\255\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\021\001\022\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\255\255\255\255\255\255\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\021\001\022\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\021\001\022\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\003\001\255\255\021\001\022\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\003\001\255\255\021\001\022\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\003\001\255\255\021\001\022\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\003\001\255\255\021\001\022\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\003\001\255\255\021\001\022\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\003\001\255\255\021\001\022\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\003\001\255\255\021\001\022\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\003\001\255\255\021\001\022\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\003\001\255\255\021\001\022\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\003\001\255\255\021\001\022\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\021\001\022\001\006\001\007\001\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\021\001\022\001\006\001\007\001\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\021\001\022\001\006\001\007\001\
\008\001\009\001\010\001\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\021\001\022\001\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\021\001\022\001\
\006\001\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\021\001\
\022\001\006\001\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\021\001\022\001\006\001\007\001\008\001\009\001\010\001\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\021\001\022\001\006\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\021\001\022\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\021\001\007\001\008\001\009\001\010\001\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\007\001\
\008\001\009\001\010\001\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  VOID\000\
  STRING\000\
  STRUCT\000\
  GLOBAL\000\
  PIPE\000\
  FUNCTION\000\
  LIST\000\
  ADDLEFT\000\
  ADDRIGHT\000\
  FINDNODE\000\
  LISTEN\000\
  HTTPGET\000\
  HTTPPUT\000\
  HTTPDELETE\000\
  HTTPPOST\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  STR_LIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 40 "parser.mly"
                     ( _1 )
# 573 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "parser.mly"
                    ( [], [], [], [], [] )
# 579 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'global) in
    Obj.repr(
# 44 "parser.mly"
                   ( (_2 :: first _1), second _1, third _1, fourth _1, fifth _1 )
# 587 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 45 "parser.mly"
                    ( first _1, (_2 :: second _1), third _1, fourth _1, fifth _1 )
# 595 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 46 "parser.mly"
                    ( first _1, second _1, (_2 :: third _1), fourth _1, fifth _1 )
# 603 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pdecl) in
    Obj.repr(
# 47 "parser.mly"
                    ( first _1, second _1, third _1, (_2 :: fourth _1), fifth _1 )
# 611 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sdecl) in
    Obj.repr(
# 48 "parser.mly"
                    ( first _1, second _1, third _1, fourth _1, (_2 :: fifth _1) )
# 619 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 52 "parser.mly"
                                ( [_1] )
# 626 "parser.ml"
               : 'literal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'literal_list) in
    Obj.repr(
# 53 "parser.mly"
                                ( _1 :: _3 )
# 634 "parser.ml"
               : 'literal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
                                ( [_1] )
# 641 "parser.ml"
               : 'stringlit_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stringlit_list) in
    Obj.repr(
# 57 "parser.mly"
                                  ( _1 :: _3 )
# 649 "parser.ml"
               : 'stringlit_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    Obj.repr(
# 61 "parser.mly"
( {
	sname = _2;
	vars = List.rev _4;
  } )
# 660 "parser.ml"
               : 'sdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    Obj.repr(
# 69 "parser.mly"
({
	arg1 = _3;
	arg2 = _5;
})
# 671 "parser.ml"
               : 'listen))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
                    ( [] )
# 677 "parser.ml"
               : 'listen_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'listen) in
    Obj.repr(
# 76 "parser.mly"
               ( [_1] )
# 684 "parser.ml"
               : 'listen_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'listen_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 81 "parser.mly"
( { 
	pname = _2;
	listen = _4;
	body = List.rev _5;
} )
# 697 "parser.ml"
               : 'pdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 88 "parser.mly"
           ((_1,_2))
# 705 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 95 "parser.mly"
( { 
	typ = _2;
	fname = _3;
	formals = _5;
	body = List.rev _8 
} )
# 720 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
              ( [] )
# 726 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 104 "parser.mly"
                ( List.rev _1 )
# 733 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "parser.mly"
                         ( [(_1,_2)] )
# 741 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "parser.mly"
                           ( (_3,_4) :: _1 )
# 750 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
            ( Int )
# 756 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
            ( Bool )
# 762 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
            ( Void )
# 768 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
            ( MyString )
# 774 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parser.mly"
                 ( [] )
# 780 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 119 "parser.mly"
                   ( _2 :: _1 )
# 788 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 122 "parser.mly"
                     ( (_2, _3, Noexpr) )
# 796 "parser.ml"
               : 'global))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                                 ( (_2,_3,_5) )
# 805 "parser.ml"
               : 'global))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parser.mly"
               ( [] )
# 811 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 128 "parser.mly"
                 ( _2 :: _1 )
# 819 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                                                              ( Expr _1 )
# 826 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
                                                              ( Return Noexpr )
# 832 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                                                              ( Return _2 )
# 839 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 135 "parser.mly"
                                                              ( Block(List.rev _2) )
# 846 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 137 "parser.mly"
                                                              ( If(_3, _5, Block([])) )
# 854 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 138 "parser.mly"
                                                              ( If(_3, _5, _7) )
# 863 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 139 "parser.mly"
                                                              ( For(_3, _5, _7, _9) )
# 873 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 140 "parser.mly"
                                                              ( While(_3, _5) )
# 881 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'stringlit_list) in
    Obj.repr(
# 141 "parser.mly"
                                                              ( Str_list_decl(_2, _6) )
# 889 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'literal_list) in
    Obj.repr(
# 142 "parser.mly"
                                                              ( Int_list_decl(_2, _6) )
# 897 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                                                              ( Add_left(_3, _5) )
# 905 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                                                              ( Add_left(_3, _5) )
# 913 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                                                              ( Add_left(_3, _5) )
# 922 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                                                     ( Http_get(_3, _5) )
# 930 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                                                    ( Http_put(_3, _5) )
# 938 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                                                       ( Http_delete(_3, _5) )
# 946 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 149 "parser.mly"
                                                     ( Http_post(_3, _5) )
# 954 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 150 "parser.mly"
                                                          (Local(_1,_2, Noexpr))
# 962 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
                                                          (Local(_1,_2,_4))
# 971 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
              ( Noexpr )
# 977 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                ( _1 )
# 984 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 161 "parser.mly"
                                ( Literal(_1) )
# 991 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "parser.mly"
                                ( BoolLit(true) )
# 997 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "parser.mly"
                                ( BoolLit(false) )
# 1003 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 164 "parser.mly"
                                ( Id(_1) )
# 1010 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 165 "parser.mly"
                                ( MyStringLit(_1) )
# 1017 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                                ( Binop(_1, Add,   _3) )
# 1025 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
                                ( Binop(_1, Sub,   _3) )
# 1033 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                                ( Binop(_1, Mult,  _3) )
# 1041 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
                                ( Binop(_1, Div,   _3) )
# 1049 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
                                ( Binop(_1, Equal, _3) )
# 1057 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
                                ( Binop(_1, Neq,   _3) )
# 1065 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
                                ( Binop(_1, Less,  _3) )
# 1073 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
                                ( Binop(_1, Leq,   _3) )
# 1081 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "parser.mly"
                                ( Binop(_1, Greater, _3) )
# 1089 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                                ( Binop(_1, Geq,   _3) )
# 1097 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 176 "parser.mly"
                                ( Binop(_1, And,   _3) )
# 1105 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
                                ( Binop(_1, Or,    _3) )
# 1113 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "parser.mly"
                                ( Unop(Neg, _2) )
# 1120 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
                                ( Unop(Not, _2) )
# 1127 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
                                ( Assign(_1, _3) )
# 1135 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 181 "parser.mly"
                                ( Call(_1, _3) )
# 1143 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                                ( _2 )
# 1150 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 188 "parser.mly"
              ( [] )
# 1156 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 189 "parser.mly"
                ( List.rev _1 )
# 1163 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 192 "parser.mly"
                        ( [_1] )
# 1170 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 193 "parser.mly"
                          ( _3 :: _1 )
# 1178 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
