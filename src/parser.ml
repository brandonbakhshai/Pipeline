type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LSBRACE
  | RSBRACE
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | VOID
  | STRING
  | STRUCT
  | GLOBAL
  | FLOAT
  | FILE
  | PIPE
  | FUNCTION
  | LISTEN
  | HTTPGET
  | HTTPPUT
  | HTTPDELETE
  | HTTPPOST
  | ADDLEFT
  | ADDRIGHT
  | POPLEFT
  | POPRIGHT
  | LITERAL of (int)
  | FLOAT_LIT of (float)
  | STR_LIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
	open Ast;;

	let first   (a,_,_,_,_) = a;;
	let second  (_,b,_,_,_) = b;;
	let third   (_,_,c,_,_) = c;;
	let fourth  (_,_,_,d,_) = d;;
	let fifth   (_,_,_,_,e) = e;;
    let pipe_name = ref 0;;
# 69 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LSBRACE *);
  264 (* RSBRACE *);
  265 (* DOT *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* ASSIGN *);
  271 (* NOT *);
  272 (* EQ *);
  273 (* NEQ *);
  274 (* LT *);
  275 (* LEQ *);
  276 (* GT *);
  277 (* GEQ *);
  278 (* TRUE *);
  279 (* FALSE *);
  280 (* AND *);
  281 (* OR *);
  282 (* RETURN *);
  283 (* IF *);
  284 (* ELSE *);
  285 (* FOR *);
  286 (* WHILE *);
  287 (* INT *);
  288 (* BOOL *);
  289 (* VOID *);
  290 (* STRING *);
  291 (* STRUCT *);
  292 (* GLOBAL *);
  293 (* FLOAT *);
  294 (* FILE *);
  295 (* PIPE *);
  296 (* FUNCTION *);
  297 (* LISTEN *);
  298 (* HTTPGET *);
  299 (* HTTPPUT *);
  300 (* HTTPDELETE *);
  301 (* HTTPPOST *);
  302 (* ADDLEFT *);
  303 (* ADDRIGHT *);
  304 (* POPLEFT *);
  305 (* POPRIGHT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  306 (* LITERAL *);
  307 (* FLOAT_LIT *);
  308 (* STR_LIT *);
  309 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\007\000\
\009\000\010\000\010\000\006\000\012\000\005\000\014\000\014\000\
\015\000\015\000\013\000\013\000\013\000\013\000\013\000\013\000\
\008\000\008\000\003\000\003\000\011\000\011\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\017\000\017\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\018\000\018\000\019\000\019\000\
\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\002\000\002\000\006\000\
\007\000\000\000\001\000\005\000\003\000\009\000\000\000\001\000\
\002\000\004\000\001\000\001\000\001\000\001\000\001\000\001\000\
\000\000\002\000\004\000\006\000\000\000\002\000\002\000\002\000\
\003\000\003\000\005\000\007\000\009\000\005\000\007\000\007\000\
\007\000\007\000\003\000\005\000\005\000\000\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\003\000\004\000\003\000\004\000\
\006\000\006\000\004\000\004\000\000\000\001\000\001\000\003\000\
\002\000"

let yydefred = "\000\000\
\002\000\000\000\081\000\000\000\000\000\029\000\000\000\000\000\
\049\000\050\000\000\000\000\000\000\000\000\000\019\000\020\000\
\021\000\022\000\000\000\000\000\023\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\052\000\053\000\000\000\001\000\003\000\004\000\005\000\
\006\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\000\034\000\030\000\033\000\000\000\
\000\000\000\000\000\000\025\000\000\000\000\000\011\000\029\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\000\000\
\000\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\075\000\076\000\070\000\
\000\000\072\000\000\000\000\000\000\000\000\000\038\000\000\000\
\026\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\044\000\000\000\000\000\008\000\000\000\028\000\000\000\017\000\
\000\000\000\000\000\000\000\000\000\000\000\000\073\000\074\000\
\036\000\000\000\013\000\000\000\029\000\000\000\039\000\040\000\
\041\000\042\000\000\000\000\000\000\000\018\000\037\000\009\000\
\014\000"

let yydgoto = "\002\000\
\003\000\004\000\038\000\086\000\040\000\041\000\042\000\130\000\
\095\000\096\000\046\000\153\000\043\000\159\000\160\000\044\000\
\090\000\107\000\108\000"

let yysindex = "\010\000\
\000\000\000\000\000\000\053\000\005\001\000\000\005\001\005\001\
\000\000\000\000\098\255\015\255\024\255\029\255\000\000\000\000\
\000\000\000\000\235\254\070\255\000\000\000\000\040\255\070\255\
\050\255\052\255\061\255\065\255\066\255\083\255\091\255\092\255\
\000\000\000\000\000\000\041\255\000\000\000\000\000\000\000\000\
\000\000\000\000\008\255\154\001\151\002\150\255\087\255\087\255\
\000\000\175\001\005\001\005\001\005\001\106\255\064\255\077\255\
\069\255\005\001\005\001\005\001\005\001\071\255\074\255\075\255\
\076\255\005\001\082\255\005\001\014\255\000\000\005\001\005\001\
\005\001\005\001\005\001\005\001\005\001\005\001\005\001\005\001\
\005\001\005\001\005\001\000\000\000\000\000\000\000\000\170\002\
\132\003\130\255\189\002\000\000\011\255\131\255\000\000\000\000\
\138\255\064\003\081\003\098\003\115\003\135\255\136\255\153\255\
\154\255\132\003\155\255\147\255\151\255\132\003\000\000\152\255\
\005\001\000\000\103\255\103\255\087\255\087\255\178\003\178\003\
\079\255\079\255\079\255\079\255\165\003\149\003\209\000\005\001\
\209\000\002\255\000\000\005\001\111\255\202\255\070\255\005\001\
\005\001\005\001\005\001\005\001\005\001\000\000\000\000\000\000\
\005\001\000\000\163\255\196\001\139\255\217\001\000\000\167\255\
\000\000\117\255\238\001\165\255\000\000\121\255\172\255\179\255\
\208\002\227\002\246\002\009\003\028\003\047\003\132\003\000\000\
\000\000\209\000\005\001\000\000\177\255\000\000\140\255\000\000\
\182\255\070\255\188\255\204\255\207\255\208\255\000\000\000\000\
\000\000\209\255\000\000\211\255\000\000\157\255\000\000\000\000\
\000\000\000\000\209\000\210\255\105\000\000\000\000\000\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\001\083\001\
\000\000\000\000\000\000\214\255\000\000\000\000\000\000\157\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\213\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\255\000\000\215\255\000\000\059\255\000\000\000\000\
\000\000\000\000\007\002\032\002\108\001\133\001\013\255\081\255\
\057\002\082\002\107\002\132\002\017\255\021\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\216\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\217\255\
\000\000\000\000\000\000\000\000\000\000\000\000\080\255\000\000\
\000\000\000\000\218\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\252\255\000\000\000\000\000\000\000\000\
\000\000\000\000\162\255\000\000\240\255\000\000\000\000\254\255\
\051\000\000\000\000\000"

let yytablesize = 1223
let yytable = "\039\000\
\035\000\134\000\045\000\055\000\047\000\048\000\152\000\057\000\
\050\000\079\000\001\000\131\000\079\000\058\000\111\000\058\000\
\051\000\064\000\058\000\064\000\112\000\065\000\064\000\065\000\
\132\000\052\000\065\000\113\000\058\000\058\000\053\000\054\000\
\015\000\016\000\017\000\018\000\058\000\058\000\021\000\022\000\
\064\000\064\000\066\000\056\000\047\000\065\000\047\000\067\000\
\088\000\089\000\091\000\058\000\037\000\059\000\068\000\098\000\
\099\000\100\000\101\000\069\000\069\000\069\000\060\000\106\000\
\069\000\110\000\061\000\062\000\114\000\115\000\116\000\117\000\
\118\000\119\000\120\000\121\000\122\000\123\000\124\000\125\000\
\126\000\059\000\080\000\059\000\063\000\080\000\059\000\071\000\
\072\000\073\000\074\000\075\000\064\000\065\000\197\000\071\000\
\059\000\059\000\049\000\005\000\015\000\016\000\017\000\018\000\
\059\000\059\000\021\000\022\000\007\000\092\000\148\000\071\000\
\008\000\154\000\074\000\075\000\093\000\094\000\158\000\009\000\
\010\000\097\000\149\000\102\000\151\000\150\000\103\000\104\000\
\105\000\155\000\128\000\109\000\133\000\161\000\162\000\163\000\
\164\000\165\000\166\000\135\000\140\000\141\000\167\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\005\000\
\145\000\006\000\085\000\142\000\143\000\144\000\146\000\147\000\
\007\000\190\000\156\000\168\000\008\000\185\000\170\000\172\000\
\089\000\173\000\175\000\009\000\010\000\176\000\177\000\011\000\
\012\000\187\000\013\000\014\000\015\000\016\000\017\000\018\000\
\178\000\189\000\021\000\022\000\191\000\188\000\199\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\005\000\192\000\006\000\157\000\193\000\
\194\000\198\000\200\000\195\000\007\000\196\000\046\000\077\000\
\008\000\078\000\015\000\016\000\046\000\186\000\000\000\009\000\
\010\000\000\000\000\000\011\000\012\000\000\000\013\000\014\000\
\015\000\016\000\017\000\018\000\000\000\000\000\021\000\022\000\
\000\000\000\000\000\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\000\000\
\000\000\000\000\035\000\000\000\035\000\035\000\000\000\000\000\
\000\000\000\000\000\000\035\000\000\000\000\000\000\000\035\000\
\000\000\000\000\000\000\000\000\000\000\000\000\035\000\035\000\
\000\000\000\000\035\000\035\000\000\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\000\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\005\000\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\010\000\000\000\000\000\011\000\012\000\
\000\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\000\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\005\000\000\000\006\000\201\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\010\000\
\000\000\000\000\011\000\012\000\000\000\013\000\014\000\015\000\
\016\000\017\000\018\000\000\000\000\000\021\000\022\000\000\000\
\000\000\000\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\010\000\000\000\
\010\000\010\000\000\000\000\000\000\000\000\000\000\000\010\000\
\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\010\000\000\000\000\000\010\000\010\000\
\000\000\010\000\010\000\010\000\010\000\010\000\010\000\000\000\
\000\000\010\000\010\000\000\000\000\000\000\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\005\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\010\000\
\000\000\000\000\011\000\012\000\000\000\013\000\014\000\015\000\
\016\000\017\000\018\000\000\000\000\000\021\000\022\000\000\000\
\000\000\000\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\005\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\008\000\051\000\000\000\051\000\000\000\
\000\000\051\000\009\000\010\000\051\000\051\000\051\000\051\000\
\051\000\000\000\000\000\051\000\051\000\051\000\051\000\051\000\
\051\000\000\000\000\000\051\000\051\000\000\000\000\000\000\000\
\000\000\000\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\067\000\000\000\067\000\000\000\000\000\067\000\
\000\000\000\000\000\000\067\000\067\000\067\000\067\000\000\000\
\000\000\067\000\067\000\067\000\067\000\067\000\067\000\000\000\
\000\000\067\000\067\000\068\000\000\000\068\000\000\000\000\000\
\068\000\000\000\000\000\000\000\068\000\068\000\068\000\068\000\
\000\000\000\000\068\000\068\000\068\000\068\000\068\000\068\000\
\000\000\000\000\068\000\068\000\056\000\000\000\056\000\000\000\
\000\000\056\000\000\000\000\000\000\000\056\000\056\000\056\000\
\056\000\000\000\000\000\056\000\056\000\056\000\056\000\056\000\
\056\000\000\000\000\000\056\000\056\000\057\000\000\000\057\000\
\000\000\000\000\057\000\000\000\000\000\000\000\057\000\057\000\
\057\000\057\000\000\000\000\000\057\000\057\000\057\000\057\000\
\057\000\057\000\070\000\000\000\057\000\057\000\000\000\000\000\
\000\000\000\000\071\000\072\000\073\000\074\000\075\000\000\000\
\000\000\076\000\077\000\078\000\079\000\080\000\081\000\087\000\
\000\000\082\000\083\000\000\000\000\000\000\000\000\000\071\000\
\072\000\073\000\074\000\075\000\000\000\000\000\076\000\077\000\
\078\000\079\000\080\000\081\000\169\000\000\000\082\000\083\000\
\000\000\000\000\000\000\000\000\071\000\072\000\073\000\074\000\
\075\000\000\000\000\000\076\000\077\000\078\000\079\000\080\000\
\081\000\171\000\000\000\082\000\083\000\000\000\000\000\000\000\
\000\000\071\000\072\000\073\000\074\000\075\000\000\000\000\000\
\076\000\077\000\078\000\079\000\080\000\081\000\174\000\000\000\
\082\000\083\000\000\000\000\000\000\000\000\000\071\000\072\000\
\073\000\074\000\075\000\000\000\000\000\076\000\077\000\078\000\
\079\000\080\000\081\000\000\000\000\000\082\000\083\000\054\000\
\000\000\054\000\000\000\000\000\054\000\000\000\000\000\000\000\
\054\000\054\000\000\000\000\000\000\000\000\000\054\000\054\000\
\054\000\054\000\054\000\054\000\000\000\000\000\054\000\054\000\
\055\000\000\000\055\000\000\000\000\000\055\000\000\000\000\000\
\000\000\055\000\055\000\000\000\000\000\000\000\000\000\055\000\
\055\000\055\000\055\000\055\000\055\000\000\000\000\000\055\000\
\055\000\060\000\000\000\060\000\000\000\000\000\060\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\060\000\060\000\060\000\060\000\060\000\060\000\000\000\000\000\
\060\000\060\000\061\000\000\000\061\000\000\000\000\000\061\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000\061\000\061\000\061\000\061\000\061\000\000\000\
\000\000\061\000\061\000\062\000\000\000\062\000\000\000\000\000\
\062\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\062\000\062\000\062\000\062\000\062\000\
\000\000\000\000\062\000\062\000\063\000\000\000\063\000\000\000\
\000\000\063\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\063\000\063\000\063\000\063\000\
\063\000\084\000\000\000\063\000\063\000\000\000\000\000\071\000\
\072\000\073\000\074\000\075\000\000\000\000\000\076\000\077\000\
\078\000\079\000\080\000\081\000\127\000\000\000\082\000\083\000\
\000\000\000\000\071\000\072\000\073\000\074\000\075\000\000\000\
\000\000\076\000\077\000\078\000\079\000\080\000\081\000\129\000\
\000\000\082\000\083\000\000\000\000\000\071\000\072\000\073\000\
\074\000\075\000\000\000\000\000\076\000\077\000\078\000\079\000\
\080\000\081\000\179\000\000\000\082\000\083\000\000\000\000\000\
\071\000\072\000\073\000\074\000\075\000\000\000\000\000\076\000\
\077\000\078\000\079\000\080\000\081\000\180\000\000\000\082\000\
\083\000\000\000\000\000\071\000\072\000\073\000\074\000\075\000\
\000\000\000\000\076\000\077\000\078\000\079\000\080\000\081\000\
\181\000\000\000\082\000\083\000\000\000\000\000\071\000\072\000\
\073\000\074\000\075\000\000\000\000\000\076\000\077\000\078\000\
\079\000\080\000\081\000\182\000\000\000\082\000\083\000\000\000\
\000\000\071\000\072\000\073\000\074\000\075\000\000\000\000\000\
\076\000\077\000\078\000\079\000\080\000\081\000\183\000\000\000\
\082\000\083\000\000\000\000\000\071\000\072\000\073\000\074\000\
\075\000\000\000\000\000\076\000\077\000\078\000\079\000\080\000\
\081\000\184\000\000\000\082\000\083\000\000\000\000\000\071\000\
\072\000\073\000\074\000\075\000\000\000\000\000\076\000\077\000\
\078\000\079\000\080\000\081\000\000\000\136\000\082\000\083\000\
\071\000\072\000\073\000\074\000\075\000\000\000\000\000\076\000\
\077\000\078\000\079\000\080\000\081\000\000\000\137\000\082\000\
\083\000\071\000\072\000\073\000\074\000\075\000\000\000\000\000\
\076\000\077\000\078\000\079\000\080\000\081\000\000\000\138\000\
\082\000\083\000\071\000\072\000\073\000\074\000\075\000\000\000\
\000\000\076\000\077\000\078\000\079\000\080\000\081\000\000\000\
\139\000\082\000\083\000\071\000\072\000\073\000\074\000\075\000\
\000\000\000\000\076\000\077\000\078\000\079\000\080\000\081\000\
\000\000\000\000\082\000\083\000\071\000\072\000\073\000\074\000\
\075\000\000\000\000\000\076\000\077\000\078\000\079\000\080\000\
\081\000\000\000\000\000\082\000\083\000\071\000\072\000\073\000\
\074\000\075\000\000\000\000\000\076\000\077\000\078\000\079\000\
\080\000\081\000\000\000\000\000\082\000\071\000\072\000\073\000\
\074\000\075\000\000\000\000\000\076\000\077\000\078\000\079\000\
\080\000\081\000\071\000\072\000\073\000\074\000\075\000\000\000\
\000\000\000\000\000\000\078\000\079\000\080\000\081\000"

let yycheck = "\004\000\
\000\000\096\000\005\000\020\000\007\000\008\000\005\001\024\000\
\011\000\003\001\001\000\001\001\006\001\001\001\001\001\003\001\
\002\001\001\001\006\001\003\001\007\001\001\001\006\001\003\001\
\014\001\002\001\006\001\014\001\016\001\017\001\002\001\053\001\
\031\001\032\001\033\001\034\001\024\001\025\001\037\001\038\001\
\024\001\025\001\002\001\004\001\001\001\025\001\003\001\007\001\
\051\000\052\000\053\000\002\001\000\000\002\001\014\001\058\000\
\059\000\060\000\061\000\001\001\053\001\003\001\002\001\066\000\
\006\001\068\000\002\001\002\001\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\001\001\003\001\003\001\002\001\006\001\006\001\009\001\
\010\001\011\001\012\001\013\001\002\001\002\001\189\000\009\001\
\016\001\017\001\001\001\002\001\031\001\032\001\033\001\034\001\
\024\001\025\001\037\001\038\001\011\001\004\001\113\000\009\001\
\015\001\130\000\012\001\013\001\053\001\041\001\135\000\022\001\
\023\001\053\001\127\000\053\001\129\000\128\000\053\001\053\001\
\053\001\132\000\001\001\050\001\002\001\136\000\137\000\138\000\
\139\000\140\000\141\000\002\001\006\001\006\001\145\000\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\002\001\
\006\001\004\001\005\001\003\001\003\001\003\001\008\001\008\001\
\011\001\178\000\052\001\001\001\015\001\170\000\028\001\001\001\
\171\000\053\001\006\001\022\001\023\001\053\001\003\001\026\001\
\027\001\001\001\029\001\030\001\031\001\032\001\033\001\034\001\
\006\001\004\001\037\001\038\001\001\001\050\001\195\000\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\002\001\001\001\004\001\005\001\001\001\
\001\001\053\001\001\001\003\001\011\001\003\001\001\001\003\001\
\015\001\003\001\003\001\003\001\003\001\171\000\255\255\022\001\
\023\001\255\255\255\255\026\001\027\001\255\255\029\001\030\001\
\031\001\032\001\033\001\034\001\255\255\255\255\037\001\038\001\
\255\255\255\255\255\255\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\255\255\255\255\002\001\255\255\004\001\005\001\255\255\255\255\
\255\255\255\255\255\255\011\001\255\255\255\255\255\255\015\001\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\023\001\
\255\255\255\255\026\001\027\001\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\002\001\255\255\
\004\001\255\255\255\255\255\255\255\255\255\255\255\255\011\001\
\255\255\255\255\255\255\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\023\001\255\255\255\255\026\001\027\001\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\255\255\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\002\001\255\255\004\001\005\001\255\255\255\255\
\255\255\255\255\255\255\011\001\255\255\255\255\255\255\015\001\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\023\001\
\255\255\255\255\026\001\027\001\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\255\255\037\001\038\001\255\255\
\255\255\255\255\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\002\001\255\255\
\004\001\005\001\255\255\255\255\255\255\255\255\255\255\011\001\
\255\255\255\255\255\255\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\023\001\255\255\255\255\026\001\027\001\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\255\255\
\255\255\037\001\038\001\255\255\255\255\255\255\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\002\001\255\255\004\001\255\255\255\255\255\255\
\255\255\255\255\255\255\011\001\255\255\255\255\255\255\015\001\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\023\001\
\255\255\255\255\026\001\027\001\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\255\255\037\001\038\001\255\255\
\255\255\255\255\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\002\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\001\
\255\255\255\255\255\255\015\001\001\001\255\255\003\001\255\255\
\255\255\006\001\022\001\023\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\255\255\255\255\255\255\
\255\255\255\255\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\025\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\001\001\255\255\024\001\025\001\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\001\001\
\255\255\024\001\025\001\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\001\001\255\255\024\001\025\001\
\255\255\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\001\001\255\255\024\001\025\001\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\001\001\255\255\
\024\001\025\001\255\255\255\255\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\025\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\255\255\
\010\001\011\001\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\024\001\025\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\255\255\010\001\011\001\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\025\001\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\025\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\025\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\003\001\255\255\024\001\025\001\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\003\001\255\255\024\001\025\001\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\003\001\
\255\255\024\001\025\001\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\003\001\255\255\024\001\025\001\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\003\001\255\255\024\001\
\025\001\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\003\001\255\255\024\001\025\001\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\003\001\255\255\024\001\025\001\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\003\001\255\255\
\024\001\025\001\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\003\001\255\255\024\001\025\001\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\006\001\024\001\025\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\006\001\024\001\
\025\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\006\001\
\024\001\025\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\006\001\024\001\025\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\025\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LSBRACE\000\
  RSBRACE\000\
  DOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  VOID\000\
  STRING\000\
  STRUCT\000\
  GLOBAL\000\
  FLOAT\000\
  FILE\000\
  PIPE\000\
  FUNCTION\000\
  LISTEN\000\
  HTTPGET\000\
  HTTPPUT\000\
  HTTPDELETE\000\
  HTTPPOST\000\
  ADDLEFT\000\
  ADDRIGHT\000\
  POPLEFT\000\
  POPRIGHT\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  FLOAT_LIT\000\
  STR_LIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 44 "parser.mly"
                     ( _1 )
# 628 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
                    ( [], [], [], [], [] )
# 634 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'global) in
    Obj.repr(
# 48 "parser.mly"
                   ( (_2 :: first _1), second _1, third _1, fourth _1, fifth _1 )
# 642 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 49 "parser.mly"
                    ( first _1, (_2 :: second _1), third _1, fourth _1, fifth _1 )
# 650 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 50 "parser.mly"
                    ( first _1, second _1, (_2 :: third _1), fourth _1, fifth _1 )
# 658 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pdecl) in
    Obj.repr(
# 51 "parser.mly"
                    ( first _1, second _1, third _1, (_2 :: fourth _1), fifth _1 )
# 666 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sdecl) in
    Obj.repr(
# 52 "parser.mly"
                    ( first _1, second _1, third _1, fourth _1, (_2 :: fifth _1) )
# 674 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    Obj.repr(
# 65 "parser.mly"
( {
	sname = _2;
	vars = List.rev _4;
} )
# 685 "parser.ml"
               : 'sdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    Obj.repr(
# 73 "parser.mly"
({
	arg1 = _3;
	arg2 = _5;
})
# 696 "parser.ml"
               : 'listen))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
                    ( [] )
# 702 "parser.ml"
               : 'listen_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'listen) in
    Obj.repr(
# 80 "parser.mly"
               ( [_1] )
# 709 "parser.ml"
               : 'listen_opt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'listen_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 85 "parser.mly"
( 
    pipe_name := !pipe_name + 1;
    { 
    	pname = "pipe_" ^ string_of_int !pipe_name;
    	listen = _3;
    	body = List.rev _4;
    }
)
# 724 "parser.ml"
               : 'pdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 95 "parser.mly"
                ((_1,_2, Noexpr))
# 732 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 102 "parser.mly"
( { 
	typ = _2;
	fname = _3;
	formals = _5;
	body = List.rev _8 
} )
# 747 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "parser.mly"
              ( [] )
# 753 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 111 "parser.mly"
                ( List.rev _1 )
# 760 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 114 "parser.mly"
                         ( [(_1,_2)] )
# 768 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 115 "parser.mly"
                           ( (_3,_4) :: _1 )
# 777 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parser.mly"
            ( Int )
# 783 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
            ( Bool )
# 789 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "parser.mly"
            ( Void )
# 795 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
            ( MyString )
# 801 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "parser.mly"
            ( Float )
# 807 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "parser.mly"
            ( File )
# 813 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parser.mly"
                 ( [] )
# 819 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 127 "parser.mly"
                   ( _2 :: _1 )
# 827 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 130 "parser.mly"
                     ( (_2, _3, Noexpr) )
# 835 "parser.ml"
               : 'global))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                                 ( (_2,_3,_5) )
# 844 "parser.ml"
               : 'global))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
               ( [] )
# 850 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 136 "parser.mly"
                 ( _2 :: _1 )
# 858 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                                                              ( Expr _1 )
# 865 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "parser.mly"
                                                              ( Return Noexpr )
# 871 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                                                              ( Return _2 )
# 878 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 143 "parser.mly"
                                                              ( Block(List.rev _2) )
# 885 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 145 "parser.mly"
                                                              ( If(_3, _5, Block([])) )
# 893 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 146 "parser.mly"
                                                              ( If(_3, _5, _7) )
# 902 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 147 "parser.mly"
                                                              ( For(_3, _5, _7, _9) )
# 912 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 148 "parser.mly"
                                                              ( While(_3, _5) )
# 920 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 155 "parser.mly"
                                                     ( Http_get(_3, _5) )
# 928 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
                                                    ( Http_put(_3, _5) )
# 936 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                                                       ( Http_delete(_3, _5) )
# 944 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                                                     ( Http_post(_3, _5) )
# 952 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 159 "parser.mly"
                                                          (Local(_1,_2, Noexpr))
# 960 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
                                                          (Local(_1,_2,_4))
# 969 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 161 "parser.mly"
                                                          (List(_1,_2))
# 977 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 165 "parser.mly"
              ( Noexpr )
# 983 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                ( _1 )
# 990 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 169 "parser.mly"
                                ( Literal(_1) )
# 997 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 170 "parser.mly"
                                ( BoolLit(true) )
# 1003 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 171 "parser.mly"
                                ( BoolLit(false) )
# 1009 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 172 "parser.mly"
                                ( Id(_1) )
# 1016 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 173 "parser.mly"
                                ( FloatLit(_1) )
# 1023 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 174 "parser.mly"
                                ( MyStringLit(_1) )
# 1030 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                                ( Binop(_1, Add,   _3) )
# 1038 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 176 "parser.mly"
                                ( Binop(_1, Sub,   _3) )
# 1046 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
                                ( Binop(_1, Mult,  _3) )
# 1054 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "parser.mly"
                                ( Binop(_1, Div,   _3) )
# 1062 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
                                ( Binop(_1, Equal, _3) )
# 1070 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
                                ( Binop(_1, Neq,   _3) )
# 1078 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 181 "parser.mly"
                                ( Binop(_1, Less,  _3) )
# 1086 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                                ( Binop(_1, Leq,   _3) )
# 1094 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
                                ( Binop(_1, Greater, _3) )
# 1102 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 184 "parser.mly"
                                ( Binop(_1, Geq,   _3) )
# 1110 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
                                ( Binop(_1, And,   _3) )
# 1118 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 186 "parser.mly"
                                ( Binop(_1, Or,    _3) )
# 1126 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
                                ( StructAccess(_1, _3) )
# 1134 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 190 "parser.mly"
                                ( Unop(Neg, _2) )
# 1141 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 191 "parser.mly"
                                ( Unop(Not, _2) )
# 1148 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 192 "parser.mly"
                                ( Assign(_1, _3) )
# 1156 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 193 "parser.mly"
                                ( Call(_1, _3) )
# 1164 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 194 "parser.mly"
                                ( _2 )
# 1171 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 195 "parser.mly"
                                ( Access(_1,_3) )
# 1179 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 196 "parser.mly"
                                       (Addleft(_3,_5))
# 1187 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 197 "parser.mly"
                                       (Addright(_3,_5))
# 1195 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 198 "parser.mly"
                             (Popleft(_3))
# 1202 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 199 "parser.mly"
                             (Popright(_3))
# 1209 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 203 "parser.mly"
              ( [] )
# 1215 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 204 "parser.mly"
                ( List.rev _1 )
# 1222 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 207 "parser.mly"
                        ( [_1] )
# 1229 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 208 "parser.mly"
                          ( _3 :: _1 )
# 1237 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
