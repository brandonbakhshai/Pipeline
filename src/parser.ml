type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LSBRACE
  | RSBRACE
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | DOT
  | CONCAT
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | VOID
  | STRING
  | STRUCT
  | GLOBAL
  | FLOAT
  | FILE
  | PIPE
  | FUNCTION
  | LISTEN
  | HTTPGET
  | HTTPPUT
  | HTTPDELETE
  | HTTPPOST
  | ADDLEFT
  | ADDRIGHT
  | POPLEFT
  | POPRIGHT
  | LITERAL of (int)
  | FLOAT_LIT of (float)
  | STR_LIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
	open Ast;;

	let first   (a,_,_,_,_) = a;;
	let second  (_,b,_,_,_) = b;;
	let third   (_,_,c,_,_) = c;;
	let fourth  (_,_,_,d,_) = d;;
	let fifth   (_,_,_,_,e) = e;;
    let pipe_name = ref 0;;
# 70 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LSBRACE *);
  264 (* RSBRACE *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* NOT *);
  271 (* EQ *);
  272 (* NEQ *);
  273 (* LT *);
  274 (* LEQ *);
  275 (* GT *);
  276 (* GEQ *);
  277 (* TRUE *);
  278 (* FALSE *);
  279 (* AND *);
  280 (* OR *);
  281 (* DOT *);
  282 (* CONCAT *);
  283 (* RETURN *);
  284 (* IF *);
  285 (* ELSE *);
  286 (* FOR *);
  287 (* WHILE *);
  288 (* INT *);
  289 (* BOOL *);
  290 (* VOID *);
  291 (* STRING *);
  292 (* STRUCT *);
  293 (* GLOBAL *);
  294 (* FLOAT *);
  295 (* FILE *);
  296 (* PIPE *);
  297 (* FUNCTION *);
  298 (* LISTEN *);
  299 (* HTTPGET *);
  300 (* HTTPPUT *);
  301 (* HTTPDELETE *);
  302 (* HTTPPOST *);
  303 (* ADDLEFT *);
  304 (* ADDRIGHT *);
  305 (* POPLEFT *);
  306 (* POPRIGHT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  307 (* LITERAL *);
  308 (* FLOAT_LIT *);
  309 (* STR_LIT *);
  310 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\007\000\
\009\000\010\000\010\000\006\000\012\000\005\000\014\000\014\000\
\015\000\015\000\013\000\013\000\013\000\013\000\013\000\013\000\
\008\000\008\000\003\000\003\000\011\000\011\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\017\000\017\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\018\000\018\000\
\019\000\019\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\002\000\002\000\006\000\
\007\000\000\000\001\000\005\000\003\000\009\000\000\000\001\000\
\002\000\004\000\001\000\001\000\001\000\001\000\001\000\001\000\
\000\000\002\000\004\000\006\000\000\000\002\000\002\000\002\000\
\003\000\003\000\005\000\007\000\009\000\005\000\007\000\007\000\
\007\000\007\000\003\000\005\000\005\000\004\000\000\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\003\000\004\000\
\003\000\004\000\006\000\006\000\004\000\004\000\000\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\083\000\000\000\000\000\029\000\000\000\000\000\
\050\000\051\000\000\000\000\000\000\000\000\000\019\000\020\000\
\021\000\022\000\000\000\000\000\023\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\000\053\000\054\000\000\000\001\000\003\000\004\000\005\000\
\006\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\073\000\034\000\000\000\030\000\
\033\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\011\000\029\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\066\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\077\000\078\000\072\000\000\000\074\000\
\000\000\000\000\000\000\000\000\038\000\000\000\026\000\000\000\
\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\044\000\000\000\
\000\000\008\000\000\000\028\000\000\000\017\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\000\076\000\036\000\000\000\
\013\000\000\000\029\000\000\000\039\000\040\000\041\000\042\000\
\000\000\000\000\000\000\018\000\037\000\009\000\014\000"

let yydgoto = "\002\000\
\003\000\004\000\038\000\088\000\040\000\041\000\042\000\135\000\
\098\000\099\000\046\000\159\000\043\000\165\000\166\000\044\000\
\092\000\110\000\111\000"

let yysindex = "\011\000\
\000\000\000\000\000\000\054\000\113\255\000\000\113\255\113\255\
\000\000\000\000\136\255\011\255\017\255\025\255\000\000\000\000\
\000\000\000\000\235\254\174\255\000\000\000\000\057\255\174\255\
\044\255\051\255\060\255\065\255\081\255\086\255\087\255\089\255\
\000\000\000\000\000\000\104\255\000\000\000\000\000\000\000\000\
\000\000\000\000\038\255\156\001\072\002\189\255\072\255\072\255\
\000\000\176\001\113\255\113\255\113\255\006\255\058\255\063\255\
\059\255\113\255\113\255\113\255\113\255\064\255\066\255\067\255\
\068\255\113\255\073\255\113\255\010\255\000\000\113\255\113\255\
\113\255\113\255\113\255\113\255\113\255\113\255\113\255\113\255\
\113\255\113\255\113\255\113\255\000\000\000\000\075\255\000\000\
\000\000\090\002\155\003\115\255\108\002\000\000\125\255\031\255\
\130\255\000\000\000\000\131\255\074\003\095\003\116\003\137\003\
\133\255\141\255\145\255\148\255\155\003\149\255\153\255\163\255\
\155\003\000\000\165\255\113\255\003\255\003\255\072\255\072\255\
\203\003\203\003\144\255\144\255\144\255\144\255\191\003\173\003\
\000\000\003\255\120\255\010\001\113\255\010\001\002\255\000\000\
\000\000\113\255\123\255\107\000\174\255\113\255\113\255\113\255\
\113\255\113\255\113\255\000\000\000\000\000\000\113\255\000\000\
\176\255\196\001\150\255\216\001\000\000\177\255\000\000\126\255\
\236\001\175\255\000\000\128\255\192\255\186\255\126\002\144\002\
\162\002\180\002\198\002\216\002\155\003\000\000\000\000\010\001\
\113\255\000\000\195\255\000\000\147\255\000\000\196\255\174\255\
\200\255\201\255\203\255\204\255\000\000\000\000\000\000\211\255\
\000\000\212\255\000\000\164\255\000\000\000\000\000\000\000\000\
\010\001\225\255\160\000\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\084\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\001\088\001\
\000\000\000\000\000\000\228\255\000\000\000\000\000\000\213\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\227\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\083\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\255\000\000\241\255\000\000\
\062\255\000\000\000\000\000\000\006\002\030\002\112\001\136\001\
\015\255\249\255\242\002\010\003\034\003\058\003\019\255\023\255\
\000\000\054\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\242\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\243\255\000\000\000\000\
\000\000\000\000\000\000\000\000\049\255\000\000\000\000\000\000\
\244\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\252\255\000\000\000\000\000\000\000\000\
\000\000\000\000\159\255\000\000\240\255\000\000\000\000\254\255\
\071\000\000\000\000\000"

let yytablesize = 1253
let yytable = "\039\000\
\035\000\140\000\045\000\055\000\047\000\048\000\158\000\057\000\
\050\000\094\000\114\000\001\000\051\000\073\000\074\000\059\000\
\115\000\059\000\052\000\065\000\059\000\065\000\116\000\067\000\
\065\000\067\000\053\000\083\000\067\000\059\000\059\000\137\000\
\054\000\015\000\016\000\017\000\018\000\059\000\059\000\021\000\
\022\000\065\000\065\000\138\000\081\000\058\000\067\000\081\000\
\090\000\091\000\093\000\082\000\059\000\037\000\082\000\101\000\
\102\000\103\000\104\000\095\000\056\000\060\000\071\000\109\000\
\071\000\113\000\061\000\071\000\117\000\118\000\119\000\120\000\
\121\000\122\000\123\000\124\000\125\000\126\000\127\000\128\000\
\129\000\130\000\062\000\048\000\052\000\048\000\052\000\063\000\
\064\000\052\000\065\000\069\000\052\000\052\000\052\000\052\000\
\083\000\203\000\052\000\052\000\052\000\052\000\052\000\052\000\
\097\000\066\000\052\000\052\000\052\000\052\000\067\000\096\000\
\100\000\154\000\005\000\133\000\068\000\105\000\160\000\106\000\
\107\000\108\000\007\000\112\000\164\000\136\000\008\000\155\000\
\131\000\157\000\156\000\139\000\141\000\009\000\010\000\161\000\
\049\000\005\000\146\000\167\000\168\000\169\000\170\000\171\000\
\172\000\007\000\147\000\148\000\173\000\008\000\149\000\150\000\
\071\000\072\000\073\000\074\000\009\000\010\000\151\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\196\000\
\083\000\084\000\152\000\191\000\153\000\095\000\091\000\162\000\
\174\000\178\000\176\000\179\000\181\000\182\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\005\000\184\000\
\006\000\086\000\183\000\193\000\205\000\194\000\007\000\195\000\
\197\000\198\000\008\000\199\000\200\000\015\000\016\000\017\000\
\018\000\009\000\010\000\021\000\022\000\201\000\202\000\011\000\
\012\000\204\000\013\000\014\000\015\000\016\000\017\000\018\000\
\087\000\206\000\021\000\022\000\047\000\079\000\000\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\080\000\015\000\016\000\047\000\192\000\
\000\000\060\000\000\000\060\000\000\000\000\000\060\000\000\000\
\000\000\000\000\035\000\000\000\035\000\035\000\000\000\060\000\
\060\000\000\000\035\000\000\000\000\000\000\000\035\000\060\000\
\060\000\000\000\000\000\000\000\000\000\035\000\035\000\000\000\
\000\000\000\000\000\000\035\000\035\000\000\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\000\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\005\000\
\000\000\006\000\000\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\010\000\000\000\000\000\000\000\000\000\
\011\000\012\000\000\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\000\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\035\000\036\000\005\000\000\000\006\000\163\000\
\000\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\010\000\000\000\000\000\000\000\000\000\011\000\012\000\000\000\
\013\000\014\000\015\000\016\000\017\000\018\000\087\000\000\000\
\021\000\022\000\000\000\000\000\000\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\005\000\000\000\006\000\207\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\000\010\000\000\000\000\000\
\000\000\000\000\011\000\012\000\000\000\013\000\014\000\015\000\
\016\000\017\000\018\000\087\000\000\000\021\000\022\000\000\000\
\000\000\000\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\010\000\000\000\
\010\000\010\000\000\000\000\000\000\000\000\000\010\000\000\000\
\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
\000\000\010\000\010\000\000\000\000\000\000\000\000\000\010\000\
\010\000\000\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\000\000\010\000\010\000\000\000\000\000\000\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\005\000\000\000\006\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\010\000\
\000\000\000\000\000\000\000\000\011\000\012\000\000\000\013\000\
\014\000\015\000\016\000\017\000\018\000\087\000\000\000\021\000\
\022\000\000\000\000\000\000\000\025\000\026\000\027\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\069\000\000\000\069\000\000\000\000\000\069\000\000\000\000\000\
\069\000\069\000\069\000\069\000\000\000\000\000\069\000\069\000\
\069\000\069\000\069\000\069\000\000\000\000\000\069\000\069\000\
\070\000\069\000\070\000\000\000\000\000\070\000\000\000\000\000\
\070\000\070\000\070\000\070\000\000\000\000\000\070\000\070\000\
\070\000\070\000\070\000\070\000\000\000\000\000\070\000\070\000\
\057\000\070\000\057\000\000\000\000\000\057\000\000\000\000\000\
\057\000\057\000\057\000\057\000\000\000\000\000\057\000\057\000\
\057\000\057\000\057\000\057\000\000\000\000\000\057\000\057\000\
\058\000\057\000\058\000\000\000\000\000\058\000\000\000\000\000\
\058\000\058\000\058\000\058\000\000\000\000\000\058\000\058\000\
\058\000\058\000\058\000\058\000\070\000\000\000\058\000\058\000\
\000\000\058\000\000\000\000\000\071\000\072\000\073\000\074\000\
\000\000\000\000\075\000\076\000\077\000\078\000\079\000\080\000\
\089\000\000\000\081\000\082\000\083\000\084\000\000\000\000\000\
\071\000\072\000\073\000\074\000\000\000\000\000\075\000\076\000\
\077\000\078\000\079\000\080\000\175\000\000\000\081\000\082\000\
\083\000\084\000\000\000\000\000\071\000\072\000\073\000\074\000\
\000\000\000\000\075\000\076\000\077\000\078\000\079\000\080\000\
\177\000\000\000\081\000\082\000\083\000\084\000\000\000\000\000\
\071\000\072\000\073\000\074\000\000\000\000\000\075\000\076\000\
\077\000\078\000\079\000\080\000\180\000\000\000\081\000\082\000\
\083\000\084\000\000\000\000\000\071\000\072\000\073\000\074\000\
\000\000\000\000\075\000\076\000\077\000\078\000\079\000\080\000\
\000\000\000\000\081\000\082\000\083\000\084\000\055\000\000\000\
\055\000\000\000\000\000\055\000\000\000\000\000\055\000\055\000\
\000\000\000\000\000\000\000\000\055\000\055\000\055\000\055\000\
\055\000\055\000\000\000\000\000\055\000\055\000\056\000\055\000\
\056\000\000\000\000\000\056\000\000\000\000\000\056\000\056\000\
\000\000\000\000\000\000\000\000\056\000\056\000\056\000\056\000\
\056\000\056\000\000\000\000\000\056\000\056\000\068\000\056\000\
\068\000\000\000\000\000\068\000\000\000\000\000\068\000\068\000\
\000\000\000\000\000\000\000\000\068\000\068\000\068\000\068\000\
\068\000\068\000\085\000\000\000\068\000\068\000\000\000\068\000\
\071\000\072\000\073\000\074\000\000\000\000\000\075\000\076\000\
\077\000\078\000\079\000\080\000\132\000\000\000\081\000\082\000\
\083\000\084\000\071\000\072\000\073\000\074\000\000\000\000\000\
\075\000\076\000\077\000\078\000\079\000\080\000\134\000\000\000\
\081\000\082\000\083\000\084\000\071\000\072\000\073\000\074\000\
\000\000\000\000\075\000\076\000\077\000\078\000\079\000\080\000\
\185\000\000\000\081\000\082\000\083\000\084\000\071\000\072\000\
\073\000\074\000\000\000\000\000\075\000\076\000\077\000\078\000\
\079\000\080\000\186\000\000\000\081\000\082\000\083\000\084\000\
\071\000\072\000\073\000\074\000\000\000\000\000\075\000\076\000\
\077\000\078\000\079\000\080\000\187\000\000\000\081\000\082\000\
\083\000\084\000\071\000\072\000\073\000\074\000\000\000\000\000\
\075\000\076\000\077\000\078\000\079\000\080\000\188\000\000\000\
\081\000\082\000\083\000\084\000\071\000\072\000\073\000\074\000\
\000\000\000\000\075\000\076\000\077\000\078\000\079\000\080\000\
\189\000\000\000\081\000\082\000\083\000\084\000\071\000\072\000\
\073\000\074\000\000\000\000\000\075\000\076\000\077\000\078\000\
\079\000\080\000\190\000\000\000\081\000\082\000\083\000\084\000\
\071\000\072\000\073\000\074\000\000\000\000\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\081\000\082\000\
\083\000\084\000\061\000\000\000\061\000\000\000\000\000\061\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\000\061\000\061\000\061\000\061\000\061\000\000\000\000\000\
\061\000\061\000\062\000\000\000\062\000\000\000\000\000\062\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\062\000\062\000\062\000\062\000\062\000\062\000\000\000\000\000\
\062\000\062\000\063\000\000\000\063\000\000\000\000\000\063\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\063\000\063\000\063\000\063\000\063\000\063\000\000\000\000\000\
\063\000\063\000\064\000\000\000\064\000\000\000\000\000\064\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\064\000\064\000\064\000\064\000\064\000\064\000\000\000\142\000\
\064\000\064\000\071\000\072\000\073\000\074\000\000\000\000\000\
\075\000\076\000\077\000\078\000\079\000\080\000\000\000\000\000\
\081\000\082\000\083\000\084\000\143\000\000\000\000\000\071\000\
\072\000\073\000\074\000\000\000\000\000\075\000\076\000\077\000\
\078\000\079\000\080\000\000\000\000\000\081\000\082\000\083\000\
\084\000\144\000\000\000\000\000\071\000\072\000\073\000\074\000\
\000\000\000\000\075\000\076\000\077\000\078\000\079\000\080\000\
\000\000\000\000\081\000\082\000\083\000\084\000\145\000\000\000\
\000\000\071\000\072\000\073\000\074\000\000\000\000\000\075\000\
\076\000\077\000\078\000\079\000\080\000\000\000\000\000\081\000\
\082\000\083\000\084\000\071\000\072\000\073\000\074\000\000\000\
\000\000\075\000\076\000\077\000\078\000\079\000\080\000\000\000\
\000\000\081\000\082\000\083\000\084\000\071\000\072\000\073\000\
\074\000\000\000\000\000\075\000\076\000\077\000\078\000\079\000\
\080\000\000\000\000\000\081\000\000\000\083\000\084\000\071\000\
\072\000\073\000\074\000\000\000\000\000\075\000\076\000\077\000\
\078\000\079\000\080\000\071\000\072\000\073\000\074\000\083\000\
\084\000\000\000\000\000\077\000\078\000\079\000\080\000\000\000\
\000\000\000\000\000\000\083\000\084\000"

let yycheck = "\004\000\
\000\000\099\000\005\000\020\000\007\000\008\000\005\001\024\000\
\011\000\004\001\001\001\001\000\002\001\011\001\012\001\001\001\
\007\001\003\001\002\001\001\001\006\001\003\001\013\001\001\001\
\006\001\003\001\002\001\025\001\006\001\015\001\016\001\001\001\
\054\001\032\001\033\001\034\001\035\001\023\001\024\001\038\001\
\039\001\023\001\024\001\013\001\003\001\002\001\024\001\006\001\
\051\000\052\000\053\000\003\001\002\001\000\000\006\001\058\000\
\059\000\060\000\061\000\054\001\004\001\002\001\001\001\066\000\
\003\001\068\000\002\001\006\001\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\084\000\002\001\001\001\001\001\003\001\003\001\002\001\
\002\001\006\001\002\001\054\001\009\001\010\001\011\001\012\001\
\025\001\195\000\015\001\016\001\017\001\018\001\019\001\020\001\
\042\001\002\001\023\001\024\001\025\001\026\001\007\001\054\001\
\054\001\116\000\002\001\001\001\013\001\054\001\135\000\054\001\
\054\001\054\001\010\001\051\001\141\000\001\001\014\001\132\000\
\054\001\134\000\133\000\002\001\002\001\021\001\022\001\138\000\
\001\001\002\001\006\001\142\000\143\000\144\000\145\000\146\000\
\147\000\010\001\006\001\003\001\151\000\014\001\003\001\003\001\
\009\001\010\001\011\001\012\001\021\001\022\001\006\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\184\000\
\025\001\026\001\008\001\176\000\008\001\054\001\177\000\053\001\
\001\001\001\001\029\001\054\001\006\001\054\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\002\001\006\001\
\004\001\005\001\003\001\001\001\201\000\051\001\010\001\004\001\
\001\001\001\001\014\001\001\001\001\001\032\001\033\001\034\001\
\035\001\021\001\022\001\038\001\039\001\003\001\003\001\027\001\
\028\001\054\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\001\001\038\001\039\001\001\001\003\001\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\003\001\003\001\003\001\003\001\177\000\
\255\255\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\255\255\255\255\002\001\255\255\004\001\005\001\255\255\015\001\
\016\001\255\255\010\001\255\255\255\255\255\255\014\001\023\001\
\024\001\255\255\255\255\255\255\255\255\021\001\022\001\255\255\
\255\255\255\255\255\255\027\001\028\001\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\002\001\
\255\255\004\001\255\255\255\255\255\255\255\255\255\255\010\001\
\255\255\255\255\255\255\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\021\001\022\001\255\255\255\255\255\255\255\255\
\027\001\028\001\255\255\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\002\001\255\255\004\001\005\001\
\255\255\255\255\255\255\255\255\010\001\255\255\255\255\255\255\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\022\001\255\255\255\255\255\255\255\255\027\001\028\001\255\255\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\255\255\
\038\001\039\001\255\255\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\002\001\255\255\004\001\005\001\255\255\255\255\255\255\
\255\255\010\001\255\255\255\255\255\255\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\021\001\022\001\255\255\255\255\
\255\255\255\255\027\001\028\001\255\255\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\255\255\038\001\039\001\255\255\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\002\001\255\255\
\004\001\005\001\255\255\255\255\255\255\255\255\010\001\255\255\
\255\255\255\255\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\022\001\255\255\255\255\255\255\255\255\027\001\
\028\001\255\255\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\255\255\038\001\039\001\255\255\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\002\001\255\255\004\001\255\255\255\255\
\255\255\255\255\255\255\010\001\255\255\255\255\255\255\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\022\001\
\255\255\255\255\255\255\255\255\027\001\028\001\255\255\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\255\255\038\001\
\039\001\255\255\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\026\001\003\001\255\255\255\255\006\001\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\026\001\003\001\255\255\255\255\006\001\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\026\001\003\001\255\255\255\255\006\001\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\001\001\255\255\023\001\024\001\
\255\255\026\001\255\255\255\255\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\001\001\255\255\023\001\024\001\025\001\026\001\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\001\001\255\255\023\001\024\001\
\025\001\026\001\255\255\255\255\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\001\001\255\255\023\001\024\001\025\001\026\001\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\001\001\255\255\023\001\024\001\
\025\001\026\001\255\255\255\255\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\009\001\010\001\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\026\001\
\003\001\255\255\255\255\006\001\255\255\255\255\009\001\010\001\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\026\001\
\003\001\255\255\255\255\006\001\255\255\255\255\009\001\010\001\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\003\001\255\255\023\001\024\001\255\255\026\001\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\003\001\255\255\023\001\024\001\
\025\001\026\001\009\001\010\001\011\001\012\001\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\003\001\255\255\
\023\001\024\001\025\001\026\001\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\003\001\255\255\023\001\024\001\025\001\026\001\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\003\001\255\255\023\001\024\001\025\001\026\001\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\003\001\255\255\023\001\024\001\
\025\001\026\001\009\001\010\001\011\001\012\001\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\003\001\255\255\
\023\001\024\001\025\001\026\001\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\003\001\255\255\023\001\024\001\025\001\026\001\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\003\001\255\255\023\001\024\001\025\001\026\001\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\025\001\026\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\023\001\024\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\023\001\024\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\023\001\024\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\006\001\
\023\001\024\001\009\001\010\001\011\001\012\001\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\023\001\024\001\025\001\026\001\006\001\255\255\255\255\009\001\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\024\001\025\001\
\026\001\006\001\255\255\255\255\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\006\001\255\255\
\255\255\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\009\001\010\001\011\001\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\009\001\010\001\011\001\
\012\001\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\026\001\009\001\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\009\001\010\001\011\001\012\001\025\001\
\026\001\255\255\255\255\017\001\018\001\019\001\020\001\255\255\
\255\255\255\255\255\255\025\001\026\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LSBRACE\000\
  RSBRACE\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  DOT\000\
  CONCAT\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  VOID\000\
  STRING\000\
  STRUCT\000\
  GLOBAL\000\
  FLOAT\000\
  FILE\000\
  PIPE\000\
  FUNCTION\000\
  LISTEN\000\
  HTTPGET\000\
  HTTPPUT\000\
  HTTPDELETE\000\
  HTTPPOST\000\
  ADDLEFT\000\
  ADDRIGHT\000\
  POPLEFT\000\
  POPRIGHT\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  FLOAT_LIT\000\
  STR_LIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 44 "parser.mly"
                     ( _1 )
# 639 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
                    ( [], [], [], [], [] )
# 645 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'global) in
    Obj.repr(
# 48 "parser.mly"
                   ( (_2 :: first _1), second _1, third _1, fourth _1, fifth _1 )
# 653 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 49 "parser.mly"
                    ( first _1, (_2 :: second _1), third _1, fourth _1, fifth _1 )
# 661 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 50 "parser.mly"
                    ( first _1, second _1, (_2 :: third _1), fourth _1, fifth _1 )
# 669 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pdecl) in
    Obj.repr(
# 51 "parser.mly"
                    ( first _1, second _1, third _1, (_2 :: fourth _1), fifth _1 )
# 677 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sdecl) in
    Obj.repr(
# 52 "parser.mly"
                    ( first _1, second _1, third _1, fourth _1, (_2 :: fifth _1) )
# 685 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    Obj.repr(
# 56 "parser.mly"
( {
	sname = _2;
	vars = List.rev _4;
  } )
# 696 "parser.ml"
               : 'sdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    Obj.repr(
# 64 "parser.mly"
({
	arg1 = _3;
	arg2 = _5;
})
# 707 "parser.ml"
               : 'listen))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
                    ( [] )
# 713 "parser.ml"
               : 'listen_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'listen) in
    Obj.repr(
# 71 "parser.mly"
               ( [_1] )
# 720 "parser.ml"
               : 'listen_opt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'listen_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 76 "parser.mly"
( 
    pipe_name := !pipe_name + 1;
    { 
    	pname = "pipe_" ^ string_of_int !pipe_name;
    	listen = _3;
    	body = List.rev _4;
    }
)
# 735 "parser.ml"
               : 'pdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 86 "parser.mly"
                ((_1,_2))
# 743 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 93 "parser.mly"
( { 
	typ = _2;
	fname = _3;
	formals = _5;
	body = List.rev _8 
} )
# 758 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
              ( [] )
# 764 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 102 "parser.mly"
                ( List.rev _1 )
# 771 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 105 "parser.mly"
                         ( [(_1,_2)] )
# 779 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "parser.mly"
                           ( (_3,_4) :: _1 )
# 788 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "parser.mly"
            ( Int )
# 794 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "parser.mly"
            ( Bool )
# 800 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
            ( Void )
# 806 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
            ( MyString )
# 812 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
            ( Float )
# 818 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
            ( File )
# 824 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser.mly"
                 ( [] )
# 830 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 118 "parser.mly"
                   ( _2 :: _1 )
# 838 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 121 "parser.mly"
                     ( (_2, _3, Noexpr) )
# 846 "parser.ml"
               : 'global))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                                 ( (_2,_3,_5) )
# 855 "parser.ml"
               : 'global))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parser.mly"
               ( [] )
# 861 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 127 "parser.mly"
                 ( _2 :: _1 )
# 869 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                                                              ( Expr _1 )
# 876 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 132 "parser.mly"
                                                              ( Return Noexpr )
# 882 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                                                              ( Return _2 )
# 889 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 134 "parser.mly"
                                                              ( Block(List.rev _2) )
# 896 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 136 "parser.mly"
                                                              ( If(_3, _5, Block([])) )
# 904 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 137 "parser.mly"
                                                              ( If(_3, _5, _7) )
# 913 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 138 "parser.mly"
                                                              ( For(_3, _5, _7, _9) )
# 923 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 139 "parser.mly"
                                                              ( While(_3, _5) )
# 931 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                                                     ( Http_get(_3, _5) )
# 939 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                                                    ( Http_put(_3, _5) )
# 947 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                                                       ( Http_delete(_3, _5) )
# 955 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 149 "parser.mly"
                                                     ( Http_post(_3, _5) )
# 963 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 150 "parser.mly"
                                                          (Local(_1,_2, Noexpr))
# 971 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
                                                          (Local(_1,_2,_4))
# 980 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 152 "parser.mly"
                                                          (List(_1,_2))
# 988 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 153 "parser.mly"
                                                          (Struct(_2,_3))
# 996 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "parser.mly"
              ( Noexpr )
# 1002 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                ( _1 )
# 1009 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 160 "parser.mly"
                                ( Literal(_1) )
# 1016 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 161 "parser.mly"
                                ( BoolLit(true) )
# 1022 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "parser.mly"
                                ( BoolLit(false) )
# 1028 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 163 "parser.mly"
                                ( Id(_1) )
# 1035 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 164 "parser.mly"
                                ( FloatLit(_1) )
# 1042 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 165 "parser.mly"
                                ( MyStringLit(_1) )
# 1049 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                                ( Binop(_1, Add,   _3) )
# 1057 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
                                ( Binop(_1, Sub,   _3) )
# 1065 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                                ( Binop(_1, Mult,  _3) )
# 1073 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
                                ( Binop(_1, Div,   _3) )
# 1081 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
                                ( Binop(_1, Equal, _3) )
# 1089 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
                                ( Binop(_1, Neq,   _3) )
# 1097 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
                                ( Binop(_1, Less,  _3) )
# 1105 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
                                ( Binop(_1, Leq,   _3) )
# 1113 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "parser.mly"
                                ( Binop(_1, Greater, _3) )
# 1121 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                                ( Binop(_1, Geq,   _3) )
# 1129 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 176 "parser.mly"
                                ( Binop(_1, And,   _3) )
# 1137 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
                                ( Binop(_1, Dot,   _3) )
# 1145 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "parser.mly"
                                ( Binop(_1, Or,    _3) )
# 1153 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
                                ( Concat(_1,_3) )
# 1161 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
                                ( Unop(Neg, _2) )
# 1168 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 181 "parser.mly"
                                ( Unop(Not, _2) )
# 1175 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                                ( Assign(_1, _3) )
# 1183 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 183 "parser.mly"
                                ( Call(_1, _3) )
# 1191 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 184 "parser.mly"
                                ( _2 )
# 1198 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 185 "parser.mly"
                                ( Access(_1,_3) )
# 1206 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 186 "parser.mly"
                                       (Addleft(_3,_5))
# 1214 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
                                       (Addright(_3,_5))
# 1222 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 188 "parser.mly"
                             (Popleft(_3))
# 1229 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 189 "parser.mly"
                             (Popright(_3))
# 1236 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 193 "parser.mly"
              ( [] )
# 1242 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 194 "parser.mly"
                ( List.rev _1 )
# 1249 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 197 "parser.mly"
                        ( [_1] )
# 1256 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 198 "parser.mly"
                          ( _3 :: _1 )
# 1264 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
